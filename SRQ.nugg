<?xml version="1.0" encoding="utf-8"?>
<nugget name="ZSRQ">
 <CLAS CLSNAME="ZCX_DYN_REMOTE" VERSION="1" LANGU="E" DESCRIPT="Dynamic Remote Exception" CATEGORY="40" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="CX_STATIC_CHECK">
  <implementing CLSNAME="ZCX_DYN_REMOTE" REFCLSNAME="IF_T100_MESSAGE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCX_DYN_REMOTE" CMPNAME="ASSIGN_COMP_FAILED" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="7 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="39 " SRCCOLUMN1="4 " SRCROW2="46 " SRCCOLUMN2="28 " LOCKED="X" TYPESRC_LENG="320 " TYPESRC="begin of ASSIGN_COMP_FAILED,
      msgid type symsgid value &apos;ZDYNTYPEBUILDER&apos;,
      msgno type symsgno value &apos;008&apos;,
      attr1 type scx_attrname value &apos;FIELD&apos;,
      attr2 type scx_attrname value &apos;&apos;,
      attr3 type scx_attrname value &apos;&apos;,
      attr4 type scx_attrname value &apos;&apos;,
    end of ASSIGN_COMP_FAILED
"/>
  <attribute CLSNAME="ZCX_DYN_REMOTE" CMPNAME="ASSIGN_FAILED" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="8 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="48 " SRCCOLUMN1="4 " SRCROW2="55 " SRCCOLUMN2="23 " LOCKED="X" TYPESRC_LENG="305 " TYPESRC="begin of ASSIGN_FAILED,
      msgid type symsgid value &apos;ZDYNTYPEBUILDER&apos;,
      msgno type symsgno value &apos;010&apos;,
      attr1 type scx_attrname value &apos;&apos;,
      attr2 type scx_attrname value &apos;&apos;,
      attr3 type scx_attrname value &apos;&apos;,
      attr4 type scx_attrname value &apos;&apos;,
    end of ASSIGN_FAILED
"/>
  <attribute CLSNAME="ZCX_DYN_REMOTE" CMPNAME="FIELD" VERSION="1" LANGU="E" DESCRIPT="Field Name" EXPOSURE="2" STATE="1" EDITORDER="7 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="FIELDNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCX_DYN_REMOTE" CMPNAME="NO_FIELD" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="30 " SRCCOLUMN1="4 " SRCROW2="37 " SRCCOLUMN2="18 " LOCKED="X" TYPESRC_LENG="300 " TYPESRC="begin of NO_FIELD,
      msgid type symsgid value &apos;ZDYNTYPEBUILDER&apos;,
      msgno type symsgno value &apos;006&apos;,
      attr1 type scx_attrname value &apos;FIELD&apos;,
      attr2 type scx_attrname value &apos;&apos;,
      attr3 type scx_attrname value &apos;&apos;,
      attr4 type scx_attrname value &apos;&apos;,
    end of NO_FIELD
"/>
  <attribute CLSNAME="ZCX_DYN_REMOTE" CMPNAME="RFC_DESTINATION" VERSION="1" LANGU="E" DESCRIPT="Logical Destination (Specified in Function Call)" EXPOSURE="2" STATE="1" EDITORDER="5 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="RFCDEST" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCX_DYN_REMOTE" CMPNAME="RFC_READ" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="21 " SRCCOLUMN1="4 " SRCROW2="28 " SRCCOLUMN2="18 " LOCKED="X" TYPESRC_LENG="315 " TYPESRC="begin of RFC_READ,
      msgid type symsgid value &apos;ZDYNTYPEBUILDER&apos;,
      msgno type symsgno value &apos;007&apos;,
      attr1 type scx_attrname value &apos;TABLE&apos;,
      attr2 type scx_attrname value &apos;RFC_DESTINATION&apos;,
      attr3 type scx_attrname value &apos;&apos;,
      attr4 type scx_attrname value &apos;&apos;,
    end of RFC_READ
"/>
  <attribute CLSNAME="ZCX_DYN_REMOTE" CMPNAME="TABLE" VERSION="1" LANGU="E" DESCRIPT="Name of a structure" EXPOSURE="2" STATE="1" EDITORDER="6 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRUKNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCX_DYN_REMOTE" CMPNAME="ZCX_DYN_REMOTE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="12 " SRCCOLUMN1="4 " SRCROW2="19 " SRCCOLUMN2="24 " LOCKED="X" TYPESRC_LENG="307 " TYPESRC="begin of ZCX_DYN_REMOTE,
      msgid type symsgid value &apos;ZDYNTYPEBUILDER&apos;,
      msgno type symsgno value &apos;000&apos;,
      attr1 type scx_attrname value &apos;&apos;,
      attr2 type scx_attrname value &apos;&apos;,
      attr3 type scx_attrname value &apos;&apos;,
      attr4 type scx_attrname value &apos;&apos;,
    end of ZCX_DYN_REMOTE
"/>
  <inheritance CLSNAME="ZCX_DYN_REMOTE" REFCLSNAME="CX_STATIC_CHECK" VERSION="1" STATE="1"/>
 </CLAS>
 <CLAS CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" VERSION="1" LANGU="E" DESCRIPT="Dynamic Type Builder" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <attribute CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="OFFSET" VERSION="1" LANGU="E" DESCRIPT="Offset" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="&apos;OFFSET&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="RFCTYPE3" VERSION="1" LANGU="E" DESCRIPT="Type of entry in RFCDES" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;3&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="RFCTYPE_D" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="BUILD_DATA" VERSION="1" LANGU="E" DESCRIPT="Build Remote Data Types" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="BUILD_DATA" SCONAME="I_RFCDEST" VERSION="1" LANGU="E" DESCRIPT="Logical Destination (Specified in Function Call)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="RFCDEST" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="BUILD_DATA" SCONAME="I_STRUCT" VERSION="1" LANGU="E" DESCRIPT="Name of a structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRUKNAME"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="BUILD_DATA" SCONAME="E_STRUCDATA" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="DATA"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="BUILD_DATA" SCONAME="E_TABLEDATA" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="3" TYPE="DATA"/>
   <exception CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="BUILD_DATA" SCONAME="ZCX_DYN_REMOTE_TYPE_BUILDER" VERSION="1" LANGU="E" DESCRIPT="Dynamic Type Builder Exception" MTDTYPE="0" EDITORDER="1 "/>
   <source>method BUILD_DATA.

  data: lo_abapstrucdescr type ref to cl_abap_structdescr,
        lo_abaptabledescr type ref to cl_abap_tabledescr.

  try.

      if e_strucdata is requested.
        lo_abapstrucdescr = zcl_dyn_remote_type_builder=&gt;create_struct_type( i_rfcdest = i_rfcdest i_struct = i_struct ).
        create data: e_strucdata type handle lo_abapstrucdescr.
      endif.

      if e_tabledata is requested.
        lo_abaptabledescr = zcl_dyn_remote_type_builder=&gt;create_table_type( i_rfcdest = i_rfcdest i_struct = i_struct  ).
        create data: e_tabledata type handle lo_abaptabledescr.
      endif.

    catch cx_sy_create_data_error.

      raise exception type zcx_dyn_remote_type_builder
        exporting
          textid = zcx_dyn_remote_type_builder=&gt;data_creation.

  endtry.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_ELEM_TYPE" VERSION="1" LANGU="E" DESCRIPT="Create Data Element Type" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_ELEM_TYPE" SCONAME="I_RFCDEST" VERSION="1" LANGU="E" DESCRIPT="Logical Destination (Specified in Function Call)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="RFCDEST" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_ELEM_TYPE" SCONAME="I_DELEM" VERSION="1" LANGU="E" DESCRIPT="Data element (semantic domain)" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ROLLNAME"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_ELEM_TYPE" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Runtime Type Services" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="CL_ABAP_ELEMDESCR"/>
   <exception CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_ELEM_TYPE" SCONAME="CX_PARAMETER_INVALID_RANGE" VERSION="1" LANGU="E" DESCRIPT="Parameter mit ungültigem Wertebereich" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_ELEM_TYPE" SCONAME="ZCX_DYN_REMOTE_TYPE_BUILDER" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="2 "/>
   <source>method create_elem_type.

    data: ls_dd4 type dd04v,
          lv_dty type inttype,
          lv_dle type i,
          lv_dcs type i.

    data: lv_ownsys type logsys,
          lv_ownrfc type rfcdest.

    data: lx_parameter_invalid_range type ref to cx_parameter_invalid_range,
          lo_descr type ref to cl_abap_typedescr.

    try.

*       rfc destination check
        if not i_rfcdest is initial and not i_delem is initial.

          call function &apos;RFC_CHECK_DESTINATION&apos;
            exporting
              mydest                        = i_rfcdest
              mytype                        = zcl_dyn_remote_type_builder=&gt;rfctype3
            exceptions
              empty_destination             = 1
              invalid_logical_destination   = 2
              destination_with_special_char = 3
              internal_destination_id       = 4
              empty_rfctype                 = 5
              others                        = 6.

          if sy-subrc ne 0.

            raise exception type zcx_dyn_remote_type_builder
              exporting
                textid  = zcx_dyn_remote_type_builder=&gt;rfc_unreachable
                rfcdest = i_rfcdest.

          endif.

        endif.

*       get owned logical system
        call function &apos;OWN_LOGICAL_SYSTEM_GET&apos;
          importing
            own_logical_system             = lv_ownsys
          exceptions
            own_logical_system_not_defined = 1
            others                         = 2.

        if sy-subrc ne 0.

          raise exception type zcx_dyn_remote_type_builder
            exporting
              textid = zcx_dyn_remote_type_builder=&gt;own_logsys_not_defined.

        endif.

*       get owned rfc destination (if defined)
        select single rfcdest from tblsysdest into lv_ownrfc where logsys = lv_ownsys.

        if i_rfcdest is initial or i_rfcdest eq lv_ownrfc.

*         local data element
          call method cl_abap_elemdescr=&gt;describe_by_name
            exporting
              p_name         = i_delem
            receiving
              p_descr_ref    = lo_descr
            exceptions
              type_not_found = 1
              others         = 2.

          if sy-subrc ne 0.

            raise exception type zcx_dyn_remote_type_builder
              exporting
                textid = zcx_dyn_remote_type_builder=&gt;no_delem
                delem  = i_delem.

          endif.

          result ?= lo_descr.

        else.

*         remote data element
          call function &apos;SRTT_GET_REMOTE_DTEL_DEF&apos; destination i_rfcdest
            exporting
              iv_dtel_name = i_delem
            importing
              ev_dd04v     = ls_dd4
            exceptions
              invalid      = 1
              no_authority = 2
              not_found    = 3
              others       = 4.

          if sy-subrc ne 0.

            raise exception type zcx_dyn_remote_type_builder
              exporting
                textid = zcx_dyn_remote_type_builder=&gt;no_delem
                delem  = i_delem.

          endif.

          lv_dty = ls_dd4-datatype.
          lv_dle = ls_dd4-leng.
          lv_dcs = ls_dd4-decimals.

          result = zcl_dyn_remote_type_builder=&gt;get_elemdescr( i_inttype = lv_dty i_intlen = lv_dle i_decimals = lv_dcs ).

        endif.

      catch cx_parameter_invalid_range into lx_parameter_invalid_range.

        raise exception lx_parameter_invalid_range.

    endtry.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_ELEM_TYPES" VERSION="1" LANGU="E" DESCRIPT="Build Data Element Descriptor Types" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_ELEM_TYPES" SCONAME="RFC_DEST" VERSION="1" LANGU="E" DESCRIPT="Logical Destination (Specified in Function Call)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="RFCDEST" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_ELEM_TYPES" SCONAME="ELEM_LIST" VERSION="1" LANGU="E" DESCRIPT="Data Element List" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ZTT_ROLLNAME"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_ELEM_TYPES" SCONAME="ELEM_TY_DESCR_COLLECTION" VERSION="1" LANGU="E" DESCRIPT="Element Descriptor Collection" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_ELEMDESCR_COLLECTION"/>
   <exception CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_ELEM_TYPES" SCONAME="ZCX_DYN_REMOTE_TYPE_BUILDER" VERSION="1" LANGU="E" DESCRIPT="Dynamic Type Builder Exception" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_ELEM_TYPES" SCONAME="CX_PARAMETER_INVALID_RANGE" VERSION="1" LANGU="E" DESCRIPT="Parameter with Invalid Range" MTDTYPE="0" EDITORDER="2 "/>
   <exception CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_ELEM_TYPES" SCONAME="CX_SY_STRUCT_CREATION" VERSION="1" LANGU="E" DESCRIPT="Ausnahme beim Erzeugen eines Strukturtyps" MTDTYPE="0" EDITORDER="3 "/>
   <source>method create_elem_types.

    data: lv_elem  type rollname,
          lo_descr type ref to cl_abap_elemdescr,
          lx_rng   type ref to cx_parameter_invalid_range,
          lx_str   type ref to cx_sy_struct_creation.

    try.

        sort elem_list.
        delete adjacent duplicates from elem_list comparing all fields.

        create object elem_ty_descr_collection.

        loop at elem_list into lv_elem.
          lo_descr = zcl_dyn_remote_type_builder=&gt;create_elem_type( i_rfcdest = rfc_dest i_delem = lv_elem ).
          elem_ty_descr_collection-&gt;add( name = lv_elem descriptor = lo_descr ).
          clear: lv_elem.
        endloop.

      catch cx_parameter_invalid_range into lx_rng.

        raise exception lx_rng.

      catch cx_sy_struct_creation into lx_str.

        raise exception lx_str.

    endtry.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_STRUCT_TYPE" VERSION="1" LANGU="E" DESCRIPT="Create Structure Type" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_STRUCT_TYPE" SCONAME="I_RFCDEST" VERSION="1" LANGU="E" DESCRIPT="Logical Destination (Specified in Function Call)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="RFCDEST" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_STRUCT_TYPE" SCONAME="I_STRUCT" VERSION="1" LANGU="E" DESCRIPT="Name of a structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRUKNAME"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_STRUCT_TYPE" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Runtime Type Services" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="CL_ABAP_STRUCTDESCR"/>
   <exception CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_STRUCT_TYPE" SCONAME="CX_PARAMETER_INVALID_RANGE" VERSION="1" LANGU="E" DESCRIPT="Parameter mit ungültigem Wertebereich" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_STRUCT_TYPE" SCONAME="ZCX_DYN_REMOTE_TYPE_BUILDER" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_STRUCT_TYPE" SCONAME="CX_SY_STRUCT_CREATION" VERSION="1" LANGU="E" DESCRIPT="Ausnahme beim Erzeugen eines Strukturtyps" MTDTYPE="0" EDITORDER="2 "/>
   <source>method create_struct_type.

    data: lt_comp   type abap_component_tab,
          lo_descr  type ref to cl_abap_typedescr,
          lv_ownsys type logsys,
          lv_ownrfc type rfcdest.

    data: lx_parameter_invalid_range type ref to cx_parameter_invalid_range,
          lx_sy_struct_creation      type ref to cx_sy_struct_creation.

    try.

*       get owned logical system
        call function &apos;OWN_LOGICAL_SYSTEM_GET&apos;
          importing
            own_logical_system             = lv_ownsys
          exceptions
            own_logical_system_not_defined = 1
            others                         = 2.

        if sy-subrc ne 0.

          raise exception type zcx_dyn_remote_type_builder
            exporting
              textid = zcx_dyn_remote_type_builder=&gt;own_logsys_not_defined.

        endif.

*       get owned rfc destination (if defined)
        select single rfcdest from tblsysdest into lv_ownrfc where logsys = lv_ownsys.

        lt_comp = zcl_dyn_remote_type_builder=&gt;get_components( i_rfcdest = i_rfcdest i_struct = i_struct ).

        if not ( i_rfcdest is initial or i_rfcdest eq lv_ownrfc ).
*         remote destination
          result = cl_abap_structdescr=&gt;create( lt_comp ).
        else.
*         local structure
          call method cl_abap_structdescr=&gt;describe_by_name
            exporting
              p_name         = i_struct
            receiving
              p_descr_ref    = lo_descr
            exceptions
              type_not_found = 1
              others         = 2.

          if sy-subrc ne 0.

            raise exception type zcx_dyn_remote_type_builder
              exporting
                textid = zcx_dyn_remote_type_builder=&gt;no_struc
                struct = i_struct.

          endif.

          result ?= lo_descr.

        endif.

      catch cx_parameter_invalid_range into lx_parameter_invalid_range.

        raise exception lx_parameter_invalid_range.

      catch cx_sy_struct_creation into lx_sy_struct_creation.

        raise exception lx_sy_struct_creation.

    endtry.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_STRUCT_TYPES" VERSION="1" LANGU="E" DESCRIPT="Build Data Element Descriptor Types" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_STRUCT_TYPES" SCONAME="RFC_DEST" VERSION="1" LANGU="E" DESCRIPT="Logical Destination (Specified in Function Call)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="RFCDEST" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_STRUCT_TYPES" SCONAME="STRUCT_LIST" VERSION="1" LANGU="E" DESCRIPT="Structure List" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ZTT_STRUKNAME"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_STRUCT_TYPES" SCONAME="STRUCT_TY_DESCR_COLLECTION" VERSION="1" LANGU="E" DESCRIPT="Structure Descriptor Collection" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_STRUCTDESCR_COLLECTION"/>
   <exception CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_STRUCT_TYPES" SCONAME="ZCX_DYN_REMOTE_TYPE_BUILDER" VERSION="1" LANGU="E" DESCRIPT="Dynamic Type Builder Exception" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_STRUCT_TYPES" SCONAME="CX_PARAMETER_INVALID_RANGE" VERSION="1" LANGU="E" DESCRIPT="Parameter with Invalid Range" MTDTYPE="0" EDITORDER="2 "/>
   <exception CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_STRUCT_TYPES" SCONAME="CX_SY_STRUCT_CREATION" VERSION="1" LANGU="E" DESCRIPT="Ausnahme beim Erzeugen eines Strukturtyps" MTDTYPE="0" EDITORDER="3 "/>
   <source>method CREATE_STRUCT_TYPES.

  DATA: lv_struct TYPE strukname,
        lo_descr  TYPE REF TO cl_abap_structdescr,
        lx_rng    TYPE REF TO cx_parameter_invalid_range,
        lx_str    TYPE REF TO cx_sy_struct_creation.

  TRY.

      SORT struct_list.
      DELETE ADJACENT DUPLICATES FROM struct_list COMPARING ALL FIELDS.

      CREATE OBJECT struct_ty_descr_collection.

      LOOP AT struct_list INTO lv_struct.
        lo_descr = zcl_dyn_remote_type_builder=&gt;create_struct_type( i_rfcdest = rfc_dest i_struct = lv_struct ).
        struct_ty_descr_collection-&gt;add( name = lv_struct descriptor = lo_descr ).
        CLEAR: lv_struct.
      ENDLOOP.

    CATCH cx_parameter_invalid_range INTO lx_rng.

      RAISE EXCEPTION lx_rng.

    CATCH cx_sy_struct_creation INTO lx_str.

      RAISE EXCEPTION lx_str.

  ENDTRY.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_TABLE_TYPE" VERSION="1" LANGU="E" DESCRIPT="Create Table Type" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_TABLE_TYPE" SCONAME="I_RFCDEST" VERSION="1" LANGU="E" DESCRIPT="Logical Destination (Specified in Function Call)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="RFCDEST" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_TABLE_TYPE" SCONAME="I_STRUCT" VERSION="1" LANGU="E" DESCRIPT="Name of a structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRUKNAME"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_TABLE_TYPE" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Runtime Type Services" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="CL_ABAP_TABLEDESCR"/>
   <exception CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_TABLE_TYPE" SCONAME="CX_SY_TABLE_CREATION" VERSION="1" LANGU="E" DESCRIPT="Ausnahme beim Erzeugen eines Tabellentyps" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_TABLE_TYPE" SCONAME="ZCX_DYN_REMOTE_TYPE_BUILDER" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>method CREATE_TABLE_TYPE.

  data: lo_ts type ref to cl_abap_structdescr.

  data: lx_parameter_invalid_range type ref to cx_parameter_invalid_range,
        lx_sy_struct_creation      type ref to cx_sy_struct_creation.

  try.

      lo_ts = zcl_dyn_remote_type_builder=&gt;create_struct_type( i_rfcdest = i_rfcdest i_struct = i_struct ).

      result = cl_abap_tabledescr=&gt;create( p_line_type = lo_ts p_table_kind = cl_abap_tabledescr=&gt;tablekind_std p_unique = abap_false ).

    catch cx_parameter_invalid_range into lx_parameter_invalid_range.

      raise exception lx_parameter_invalid_range.

    catch cx_sy_struct_creation into lx_sy_struct_creation.

      raise exception lx_sy_struct_creation.

  endtry.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_TABLE_TYPES" VERSION="1" LANGU="E" DESCRIPT="Build Data Element Descriptor Types" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_TABLE_TYPES" SCONAME="RFC_DEST" VERSION="1" LANGU="E" DESCRIPT="Logical Destination (Specified in Function Call)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="RFCDEST" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_TABLE_TYPES" SCONAME="STRUCT_LIST" VERSION="1" LANGU="E" DESCRIPT="Structure List" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ZTT_STRUKNAME"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_TABLE_TYPES" SCONAME="TABLE_TY_DESCR_COLLECTION" VERSION="1" LANGU="E" DESCRIPT="Structure Descriptor Collection" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_TABLEDESCR_COLLECTION"/>
   <exception CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_TABLE_TYPES" SCONAME="ZCX_DYN_REMOTE_TYPE_BUILDER" VERSION="1" LANGU="E" DESCRIPT="Dynamic Type Builder Exception" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_TABLE_TYPES" SCONAME="CX_PARAMETER_INVALID_RANGE" VERSION="1" LANGU="E" DESCRIPT="Parameter with Invalid Range" MTDTYPE="0" EDITORDER="2 "/>
   <exception CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="CREATE_TABLE_TYPES" SCONAME="CX_SY_STRUCT_CREATION" VERSION="1" LANGU="E" DESCRIPT="Ausnahme beim Erzeugen eines Strukturtyps" MTDTYPE="0" EDITORDER="3 "/>
   <source>method CREATE_TABLE_TYPES.

  DATA: lv_struct TYPE strukname,
        lo_descr  TYPE REF TO cl_abap_tabledescr,
        lx_rng    TYPE REF TO cx_parameter_invalid_range,
        lx_str    TYPE REF TO cx_sy_struct_creation.

  TRY.

      SORT struct_list.
      DELETE ADJACENT DUPLICATES FROM struct_list COMPARING ALL FIELDS.

      CREATE OBJECT table_ty_descr_collection.

      LOOP AT struct_list INTO lv_struct.
        lo_descr = zcl_dyn_remote_type_builder=&gt;create_table_type( i_rfcdest = rfc_dest i_struct = lv_struct ).
        table_ty_descr_collection-&gt;add( name = lv_struct descriptor = lo_descr ).
        CLEAR: lv_struct.
      ENDLOOP.

    CATCH cx_parameter_invalid_range INTO lx_rng.

      RAISE EXCEPTION lx_rng.

    CATCH cx_sy_struct_creation INTO lx_str.

      RAISE EXCEPTION lx_str.

  ENDTRY.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="GET_COMPONENTS" VERSION="1" LANGU="E" DESCRIPT="Prepare Components" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="GET_COMPONENTS" SCONAME="I_RFCDEST" VERSION="1" LANGU="E" DESCRIPT="Logical Destination (Specified in Function Call)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="RFCDEST"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="GET_COMPONENTS" SCONAME="I_STRUCT" VERSION="1" LANGU="E" DESCRIPT="Name of a structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRUKNAME"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="GET_COMPONENTS" SCONAME="RESULT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ABAP_COMPONENT_TAB"/>
   <exception CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="GET_COMPONENTS" SCONAME="CX_PARAMETER_INVALID_RANGE" VERSION="1" LANGU="E" DESCRIPT="Parameter mit ungültigem Wertebereich" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="GET_COMPONENTS" SCONAME="ZCX_DYN_REMOTE_TYPE_BUILDER" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>method get_components.

* data declaration
    data: lo_elem      type ref to cl_abap_elemdescr.

    data: lt_fields    type standard table of dfies,
          ls_comp      type abap_componentdescr,
          ls_dfies     type dfies,
          ls_tmp_dfies type dfies,
          ls_x030l     type x030l,
          lv_intlen    type i,
          lv_prelen    type i,
          lv_decimals  type i,
          lv_off       type i,
          lv_count     type numc2.

    data: lx_parameter_invalid_range type ref to cx_parameter_invalid_range.

*   rfc destination check
    if not i_rfcdest is initial.

      call function &apos;RFC_CHECK_DESTINATION&apos;
        exporting
          mydest                        = i_rfcdest
          mytype                        = zcl_dyn_remote_type_builder=&gt;rfctype3
        exceptions
          empty_destination             = 1
          invalid_logical_destination   = 2
          destination_with_special_char = 3
          internal_destination_id       = 4
          empty_rfctype                 = 5
          others                        = 6.

      if sy-subrc ne 0.

        raise exception type zcx_dyn_remote_type_builder
          exporting
            textid  = zcx_dyn_remote_type_builder=&gt;rfc_unreachable
            rfcdest = i_rfcdest.

      endif.

    endif.

*   get dictionary information from rfc destination
    call function &apos;DDIF_FIELDINFO_GET&apos; destination i_rfcdest
      exporting
        tabname        = i_struct
      importing
        x030l_wa       = ls_x030l
      tables
        dfies_tab      = lt_fields
      exceptions
        not_found      = 1
        internal_error = 2
        others         = 3.

    if sy-subrc ne 0.

      raise exception type zcx_dyn_remote_type_builder
        exporting
          textid = zcx_dyn_remote_type_builder=&gt;no_struc
          struct = i_struct.

    endif.

*   component table builder
    try.

*       build structure field by field
        loop at lt_fields into ls_dfies.

          case ls_dfies-inttype.

            when cl_abap_elemdescr=&gt;typekind_char or
                 cl_abap_elemdescr=&gt;typekind_date or
                 cl_abap_elemdescr=&gt;typekind_time or
                 cl_abap_elemdescr=&gt;typekind_num.

              lv_intlen   = ls_dfies-intlen / ls_x030l-unicodelg.

            when others.

              lv_intlen   = ls_dfies-intlen.

          endcase.

          case ls_tmp_dfies-inttype.

            when cl_abap_elemdescr=&gt;typekind_char or
                 cl_abap_elemdescr=&gt;typekind_date or
                 cl_abap_elemdescr=&gt;typekind_time or
                 cl_abap_elemdescr=&gt;typekind_num.

              lv_prelen   = ls_tmp_dfies-intlen / ls_x030l-unicodelg.

            when others.

              lv_prelen   = ls_tmp_dfies-intlen.

          endcase.

          lv_decimals = ls_dfies-decimals.

*         offset management with a dummy filed (if needed)
          lv_off = ls_dfies-offset / ls_x030l-unicodelg - ( ls_tmp_dfies-offset / ls_x030l-unicodelg + lv_prelen ).

          if lv_off gt 0.

            lo_elem = cl_abap_elemdescr=&gt;get_c( p_length = lv_off ).

            ls_comp-type = lo_elem.

            add 1 to lv_count.

            concatenate zcl_dyn_remote_type_builder=&gt;offset &apos;_&apos; lv_count into ls_comp-name.

            append ls_comp to result.

            free: lo_elem.

          endif.

*         field management by means of internal abap types
          ls_comp-name = ls_dfies-fieldname.

*         build element
          lo_elem = zcl_dyn_remote_type_builder=&gt;get_elemdescr( i_inttype = ls_dfies-inttype i_intlen = lv_intlen i_decimals = lv_decimals ).

*         assign element
          ls_comp-type = lo_elem.

          append ls_comp to result.

          ls_tmp_dfies = ls_dfies.

          clear: ls_dfies.
        endloop.

      catch cx_parameter_invalid_range into lx_parameter_invalid_range.

        raise exception lx_parameter_invalid_range.

    endtry.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="GET_ELEMDESCR" VERSION="1" LANGU="E" DESCRIPT="Get Element Descriptor" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="GET_ELEMDESCR" SCONAME="I_INTTYPE" VERSION="1" LANGU="E" DESCRIPT="ABAP data type (C,D,N,...)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="INTTYPE"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="GET_ELEMDESCR" SCONAME="I_INTLEN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="I" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="GET_ELEMDESCR" SCONAME="I_DECIMALS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="I" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="GET_ELEMDESCR" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Runtime Type Services" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="CL_ABAP_ELEMDESCR"/>
   <exception CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="GET_ELEMDESCR" SCONAME="ZCX_DYN_REMOTE_TYPE_BUILDER" VERSION="1" LANGU="E" DESCRIPT="Dynamic Type Builder Exception" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="GET_ELEMDESCR" SCONAME="CX_PARAMETER_INVALID_RANGE" VERSION="1" LANGU="E" DESCRIPT="Parameter mit ungültigem Wertebereich" MTDTYPE="0" EDITORDER="2 "/>
   <source>method GET_ELEMDESCR.

  data: lx_pir type ref to cx_parameter_invalid_range.
  data: lv_int2 type int2,
        lv_int1 type int1.

  try.

      case i_inttype.

        when cl_abap_elemdescr=&gt;typekind_int.     result = cl_abap_elemdescr=&gt;get_i( ).
        when cl_abap_elemdescr=&gt;typekind_int1.    result ?= cl_abap_elemdescr=&gt;describe_by_data( p_data = lv_int1 ). &quot; no getters for int1
        when cl_abap_elemdescr=&gt;typekind_int2.    result ?= cl_abap_elemdescr=&gt;describe_by_data( p_data = lv_int2 ). &quot; no getters for int2
        when cl_abap_elemdescr=&gt;typekind_float.   result = cl_abap_elemdescr=&gt;get_f( ).
        when cl_abap_elemdescr=&gt;typekind_date.    result = cl_abap_elemdescr=&gt;get_d( ).
        when cl_abap_elemdescr=&gt;typekind_packed.  result = cl_abap_elemdescr=&gt;get_p( p_length = i_intlen p_decimals = i_decimals ).
        when cl_abap_elemdescr=&gt;typekind_char.    result = cl_abap_elemdescr=&gt;get_c( p_length = i_intlen ).
        when cl_abap_elemdescr=&gt;typekind_time.    result = cl_abap_elemdescr=&gt;get_t( ).
        when cl_abap_elemdescr=&gt;typekind_num.     result = cl_abap_elemdescr=&gt;get_n( p_length = i_intlen ).
        when cl_abap_elemdescr=&gt;typekind_hex.     result = cl_abap_elemdescr=&gt;get_x( p_length = i_intlen ).
        when cl_abap_elemdescr=&gt;typekind_string.  result = cl_abap_elemdescr=&gt;get_string( ).
        when cl_abap_elemdescr=&gt;typekind_xstring. result = cl_abap_elemdescr=&gt;get_xstring( ).

        when others.

          raise exception type zcx_dyn_remote_type_builder
            exporting
              textid  = zcx_dyn_remote_type_builder=&gt;no_inttype
              inttype = i_inttype.

      endcase.

    catch cx_parameter_invalid_range into lx_pir.

      raise exception lx_pir.

  endtry.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="GET_INTERNAL" VERSION="1" LANGU="E" DESCRIPT="Get Internal Data Type" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="GET_INTERNAL" SCONAME="I_DATATYPE" VERSION="1" LANGU="E" DESCRIPT="Data Type in ABAP Dictionary" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="DATATYPE_D"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="GET_INTERNAL" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="ABAP data type (C,D,N,...)" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="INTTYPE"/>
   <exception CLSNAME="ZCL_DYN_REMOTE_TYPE_BUILDER" CMPNAME="GET_INTERNAL" SCONAME="ZCX_DYN_REMOTE_TYPE_BUILDER" VERSION="1" LANGU="E" DESCRIPT="Dynamic Type Builder Exception" MTDTYPE="0" EDITORDER="1 "/>
   <source>method get_internal.

    case i_datatype.

      when &apos;ACCP&apos;. result = cl_abap_elemdescr=&gt;typekind_num.
      when &apos;CHAR&apos;. result = cl_abap_elemdescr=&gt;typekind_char.
      when &apos;CLNT&apos;. result = cl_abap_elemdescr=&gt;typekind_char.
      when &apos;CUKY&apos;. result = cl_abap_elemdescr=&gt;typekind_char.
      when &apos;CURR&apos;. result = cl_abap_elemdescr=&gt;typekind_packed.
      when &apos;DATS&apos;. result = cl_abap_elemdescr=&gt;typekind_date.
      when &apos;DEC&apos;.  result = cl_abap_elemdescr=&gt;typekind_packed.
      when &apos;FLTP&apos;. result = cl_abap_elemdescr=&gt;typekind_float.
      when &apos;INT1&apos;. result = cl_abap_elemdescr=&gt;typekind_int1.
      when &apos;INT2&apos;. result = cl_abap_elemdescr=&gt;typekind_int2.
      when &apos;INT4&apos;. result = cl_abap_elemdescr=&gt;typekind_int.
      when &apos;LANG&apos;. result = cl_abap_elemdescr=&gt;typekind_char.
      when &apos;LCHR&apos;. result = cl_abap_elemdescr=&gt;typekind_char.
      when &apos;LRAW&apos;. result = cl_abap_elemdescr=&gt;typekind_hex.
      when &apos;NUMC&apos;. result = cl_abap_elemdescr=&gt;typekind_num.
      when &apos;PREC&apos;. result = cl_abap_elemdescr=&gt;typekind_int2.
      when &apos;QUAN&apos;. result = cl_abap_elemdescr=&gt;typekind_packed.
      when &apos;RAW&apos;.  result = cl_abap_elemdescr=&gt;typekind_hex.
      when &apos;RSTR&apos;. result = cl_abap_elemdescr=&gt;typekind_xstring.
      when &apos;SSTR&apos;. result = cl_abap_elemdescr=&gt;typekind_string.
      when &apos;STRG&apos;. result = cl_abap_elemdescr=&gt;typekind_string.
      when &apos;TIMS&apos;. result = cl_abap_elemdescr=&gt;typekind_time.
      when &apos;UNIT&apos;. result = cl_abap_elemdescr=&gt;typekind_char.

      when others.

        raise exception type zcx_dyn_remote_type_builder
          exporting
            textid   = zcx_dyn_remote_type_builder=&gt;no_datatype
            datatype = i_datatype.

    endcase.

  endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCX_DYN_REMOTE_TYPE_BUILDER" VERSION="1" LANGU="E" DESCRIPT="Dynamic Type Builder Exception" CATEGORY="40" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="CX_STATIC_CHECK">
  <implementing CLSNAME="ZCX_DYN_REMOTE_TYPE_BUILDER" REFCLSNAME="IF_T100_MESSAGE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCX_DYN_REMOTE_TYPE_BUILDER" CMPNAME="DATATYPE" VERSION="1" LANGU="E" DESCRIPT="Data Type in ABAP Dictionary" EXPOSURE="2" STATE="1" EDITORDER="11 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="DATATYPE_D" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCX_DYN_REMOTE_TYPE_BUILDER" CMPNAME="DATA_CREATION" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="8 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="77 " SRCCOLUMN1="4 " SRCROW2="84 " SRCCOLUMN2="23 " LOCKED="X" TYPESRC_LENG="305 " TYPESRC="begin of DATA_CREATION,
      msgid type symsgid value &apos;ZDYNTYPEBUILDER&apos;,
      msgno type symsgno value &apos;009&apos;,
      attr1 type scx_attrname value &apos;&apos;,
      attr2 type scx_attrname value &apos;&apos;,
      attr3 type scx_attrname value &apos;&apos;,
      attr4 type scx_attrname value &apos;&apos;,
    end of DATA_CREATION
"/>
  <attribute CLSNAME="ZCX_DYN_REMOTE_TYPE_BUILDER" CMPNAME="DELEM" VERSION="1" LANGU="E" DESCRIPT="Data element (semantic domain)" EXPOSURE="2" STATE="1" EDITORDER="13 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ROLLNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCX_DYN_REMOTE_TYPE_BUILDER" CMPNAME="INTTYPE" VERSION="1" LANGU="E" DESCRIPT="ABAP data type (C,D,N,...)" EXPOSURE="2" STATE="1" EDITORDER="12 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="INTTYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCX_DYN_REMOTE_TYPE_BUILDER" CMPNAME="NO_DATATYPE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="41 " SRCCOLUMN1="4 " SRCROW2="48 " SRCCOLUMN2="21 " LOCKED="X" TYPESRC_LENG="309 " TYPESRC="begin of NO_DATATYPE,
      msgid type symsgid value &apos;ZDYNTYPEBUILDER&apos;,
      msgno type symsgno value &apos;003&apos;,
      attr1 type scx_attrname value &apos;DATATYPE&apos;,
      attr2 type scx_attrname value &apos;&apos;,
      attr3 type scx_attrname value &apos;&apos;,
      attr4 type scx_attrname value &apos;&apos;,
    end of NO_DATATYPE
"/>
  <attribute CLSNAME="ZCX_DYN_REMOTE_TYPE_BUILDER" CMPNAME="NO_DELEM" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="6 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="59 " SRCCOLUMN1="4 " SRCROW2="66 " SRCCOLUMN2="18 " LOCKED="X" TYPESRC_LENG="300 " TYPESRC="begin of NO_DELEM,
      msgid type symsgid value &apos;ZDYNTYPEBUILDER&apos;,
      msgno type symsgno value &apos;005&apos;,
      attr1 type scx_attrname value &apos;DELEM&apos;,
      attr2 type scx_attrname value &apos;&apos;,
      attr3 type scx_attrname value &apos;&apos;,
      attr4 type scx_attrname value &apos;&apos;,
    end of NO_DELEM
"/>
  <attribute CLSNAME="ZCX_DYN_REMOTE_TYPE_BUILDER" CMPNAME="NO_INTTYPE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="50 " SRCCOLUMN1="4 " SRCROW2="57 " SRCCOLUMN2="20 " LOCKED="X" TYPESRC_LENG="306 " TYPESRC="begin of NO_INTTYPE,
      msgid type symsgid value &apos;ZDYNTYPEBUILDER&apos;,
      msgno type symsgno value &apos;004&apos;,
      attr1 type scx_attrname value &apos;INTTYPE&apos;,
      attr2 type scx_attrname value &apos;&apos;,
      attr3 type scx_attrname value &apos;&apos;,
      attr4 type scx_attrname value &apos;&apos;,
    end of NO_INTTYPE
"/>
  <attribute CLSNAME="ZCX_DYN_REMOTE_TYPE_BUILDER" CMPNAME="NO_STRUC" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="32 " SRCCOLUMN1="4 " SRCROW2="39 " SRCCOLUMN2="18 " LOCKED="X" TYPESRC_LENG="301 " TYPESRC="begin of NO_STRUC,
      msgid type symsgid value &apos;ZDYNTYPEBUILDER&apos;,
      msgno type symsgno value &apos;002&apos;,
      attr1 type scx_attrname value &apos;STRUCT&apos;,
      attr2 type scx_attrname value &apos;&apos;,
      attr3 type scx_attrname value &apos;&apos;,
      attr4 type scx_attrname value &apos;&apos;,
    end of NO_STRUC
"/>
  <attribute CLSNAME="ZCX_DYN_REMOTE_TYPE_BUILDER" CMPNAME="OWN_LOGSYS_NOT_DEFINED" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="7 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="68 " SRCCOLUMN1="4 " SRCROW2="75 " SRCCOLUMN2="32 " LOCKED="X" TYPESRC_LENG="323 " TYPESRC="begin of OWN_LOGSYS_NOT_DEFINED,
      msgid type symsgid value &apos;ZDYNTYPEBUILDER&apos;,
      msgno type symsgno value &apos;011&apos;,
      attr1 type scx_attrname value &apos;&apos;,
      attr2 type scx_attrname value &apos;&apos;,
      attr3 type scx_attrname value &apos;&apos;,
      attr4 type scx_attrname value &apos;&apos;,
    end of OWN_LOGSYS_NOT_DEFINED
"/>
  <attribute CLSNAME="ZCX_DYN_REMOTE_TYPE_BUILDER" CMPNAME="RFCDEST" VERSION="1" LANGU="E" DESCRIPT="Logical Destination (Specified in Function Call)" EXPOSURE="2" STATE="1" EDITORDER="9 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="RFCDEST" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCX_DYN_REMOTE_TYPE_BUILDER" CMPNAME="RFC_UNREACHABLE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="23 " SRCCOLUMN1="4 " SRCROW2="30 " SRCCOLUMN2="25 " LOCKED="X" TYPESRC_LENG="316 " TYPESRC="begin of RFC_UNREACHABLE,
      msgid type symsgid value &apos;ZDYNTYPEBUILDER&apos;,
      msgno type symsgno value &apos;001&apos;,
      attr1 type scx_attrname value &apos;RFCDEST&apos;,
      attr2 type scx_attrname value &apos;&apos;,
      attr3 type scx_attrname value &apos;&apos;,
      attr4 type scx_attrname value &apos;&apos;,
    end of RFC_UNREACHABLE
"/>
  <attribute CLSNAME="ZCX_DYN_REMOTE_TYPE_BUILDER" CMPNAME="STRUCT" VERSION="1" LANGU="E" DESCRIPT="Name of a structure" EXPOSURE="2" STATE="1" EDITORDER="10 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRUKNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCX_DYN_REMOTE_TYPE_BUILDER" CMPNAME="ZCX_DYN_REMOTE_TYPE_BUILDER" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="14 " SRCCOLUMN1="4 " SRCROW2="21 " SRCCOLUMN2="37 " LOCKED="X" TYPESRC_LENG="333 " TYPESRC="begin of ZCX_DYN_REMOTE_TYPE_BUILDER,
      msgid type symsgid value &apos;ZDYNTYPEBUILDER&apos;,
      msgno type symsgno value &apos;000&apos;,
      attr1 type scx_attrname value &apos;&apos;,
      attr2 type scx_attrname value &apos;&apos;,
      attr3 type scx_attrname value &apos;&apos;,
      attr4 type scx_attrname value &apos;&apos;,
    end of ZCX_DYN_REMOTE_TYPE_BUILDER
"/>
  <inheritance CLSNAME="ZCX_DYN_REMOTE_TYPE_BUILDER" REFCLSNAME="CX_STATIC_CHECK" VERSION="1" STATE="1"/>
 </CLAS>
 <CLAS CLSNAME="ZCL_DYN_REMOTE" VERSION="1" LANGU="E" DESCRIPT="Dynamic" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature
type-pools: abap.</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <method CLSNAME="ZCL_DYN_REMOTE" CMPNAME="BUILD_QUERY" VERSION="1" LANGU="E" DESCRIPT="Query Builder From String" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="BUILD_QUERY" SCONAME="I_QUERY" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="BUILD_QUERY" SCONAME="R_QUERY" VERSION="1" LANGU="E" DESCRIPT="Table type for RFC_DB_OPT" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZRFC_DB_OPT_T"/>
   <source>method build_query.

    constants: gc_72 type i value 72.

    data: lt_split type standard table of string,
          ls_query type rfc_db_opt,
          lv_split type string,
          lv_slen  type i,
          lv_qlen  type i,
          lv_tlen  type i.

    split i_query at space into table lt_split.

    loop at lt_split into lv_split.

      lv_slen = strlen( lv_split ).
      lv_qlen = strlen( ls_query-text ).

      lv_tlen = lv_slen + lv_qlen + 1.

      if lv_tlen gt gc_72.
        append ls_query to r_query.
        clear: ls_query.
      endif.

      concatenate ls_query-text lv_split into ls_query-text separated by space.
      condense ls_query-text.

      clear: lv_slen, lv_qlen, lv_tlen, lv_split.
    endloop.

* last one
    if not ls_query is initial.
      append ls_query to r_query.
    endif.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_DYN_REMOTE" CMPNAME="BUILD_RUNTIME_DATA" VERSION="1" LANGU="E" DESCRIPT="Build Dynamic Data" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="BUILD_RUNTIME_DATA" SCONAME="I_TABLE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STANDARD TABLE"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="BUILD_RUNTIME_DATA" SCONAME="R_DATA" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="DATA"/>
   <source>method BUILD_RUNTIME_DATA.

  data: lo_table type ref to cl_abap_tabledescr,
        lo_struc type ref to cl_abap_structdescr.

  lo_table ?= cl_abap_tabledescr=&gt;describe_by_data( i_table ).
  lo_struc ?= lo_table-&gt;get_table_line_type( ).

  create data: r_data type handle lo_struc.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_FIELD_VALUE" VERSION="1" LANGU="E" DESCRIPT="Get Field Value" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_FIELD_VALUE" SCONAME="I_FIELDNAME" VERSION="1" LANGU="E" DESCRIPT="Field Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FIELDNAME"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_FIELD_VALUE" SCONAME="I_STRUCTURE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_FIELD_VALUE" SCONAME="E_FIELDVALUE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY"/>
   <exception CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_FIELD_VALUE" SCONAME="ZCX_DYN_REMOTE" VERSION="1" LANGU="E" DESCRIPT="Dynamic Remote Exception" MTDTYPE="0" EDITORDER="1 "/>
   <source>method GET_FIELD_VALUE.

  field-symbols: &lt;fs_field&gt; type any.

  try.

      assign component i_fieldname of structure i_structure to &lt;fs_field&gt;.

      if sy-subrc ne 0.

        raise exception type zcx_dyn_remote
          exporting
            textid = zcx_dyn_remote=&gt;no_field
            field  = i_fieldname.

      endif.

      e_fieldvalue = &lt;fs_field&gt;.

    catch cx_sy_assign_cast_illegal_cast
          cx_sy_assign_cast_unknown_type
          cx_sy_assign_out_of_range.

      raise exception type zcx_dyn_remote
        exporting
          textid = zcx_dyn_remote=&gt;assign_comp_failed
          field  = i_fieldname.

  endtry.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_FIELD_VALUES" VERSION="1" LANGU="E" DESCRIPT="Get Field Values" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_FIELD_VALUES" SCONAME="I_STRUCTURE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_FIELD_VALUES" SCONAME="I_FIELDNAME1" VERSION="1" LANGU="E" DESCRIPT="Field Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FIELDNAME"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_FIELD_VALUES" SCONAME="I_FIELDNAME2" VERSION="1" LANGU="E" DESCRIPT="Field Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FIELDNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_FIELD_VALUES" SCONAME="I_FIELDNAME3" VERSION="1" LANGU="E" DESCRIPT="Field Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FIELDNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_FIELD_VALUES" SCONAME="I_FIELDNAME4" VERSION="1" LANGU="E" DESCRIPT="Field Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FIELDNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_FIELD_VALUES" SCONAME="I_FIELDNAME5" VERSION="1" LANGU="E" DESCRIPT="Field Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FIELDNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_FIELD_VALUES" SCONAME="I_FIELDNAME6" VERSION="1" LANGU="E" DESCRIPT="Field Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FIELDNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_FIELD_VALUES" SCONAME="I_FIELDNAME7" VERSION="1" LANGU="E" DESCRIPT="Field Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="8 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FIELDNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_FIELD_VALUES" SCONAME="I_FIELDNAME8" VERSION="1" LANGU="E" DESCRIPT="Field Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="9 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FIELDNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_FIELD_VALUES" SCONAME="I_FIELDNAME9" VERSION="1" LANGU="E" DESCRIPT="Field Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="10 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FIELDNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_FIELD_VALUES" SCONAME="E_FIELDVALUE1" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="11 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_FIELD_VALUES" SCONAME="E_FIELDVALUE2" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="12 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_FIELD_VALUES" SCONAME="E_FIELDVALUE3" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="13 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_FIELD_VALUES" SCONAME="E_FIELDVALUE4" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="14 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_FIELD_VALUES" SCONAME="E_FIELDVALUE5" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="15 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_FIELD_VALUES" SCONAME="E_FIELDVALUE6" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="16 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_FIELD_VALUES" SCONAME="E_FIELDVALUE7" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="17 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_FIELD_VALUES" SCONAME="E_FIELDVALUE8" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="18 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_FIELD_VALUES" SCONAME="E_FIELDVALUE9" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="19 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY"/>
   <exception CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_FIELD_VALUES" SCONAME="ZCX_DYN_REMOTE" VERSION="1" LANGU="E" DESCRIPT="Dynamic Remote Exception" MTDTYPE="0" EDITORDER="1 "/>
   <source>method GET_FIELD_VALUES.

  if e_fieldvalue1 is requested.
    zcl_dyn_remote=&gt;get_field_value( exporting i_fieldname = i_fieldname1 i_structure = i_structure importing e_fieldvalue = e_fieldvalue1 ).
  endif.

  if e_fieldvalue2 is requested.
    zcl_dyn_remote=&gt;get_field_value( exporting i_fieldname = i_fieldname2 i_structure = i_structure importing e_fieldvalue = e_fieldvalue2 ).
  endif.

  if e_fieldvalue3 is requested.
    zcl_dyn_remote=&gt;get_field_value( exporting i_fieldname = i_fieldname3 i_structure = i_structure importing e_fieldvalue = e_fieldvalue3 ).
  endif.

  if e_fieldvalue4 is requested.
    zcl_dyn_remote=&gt;get_field_value( exporting i_fieldname = i_fieldname4 i_structure = i_structure importing e_fieldvalue = e_fieldvalue4 ).
  endif.

  if e_fieldvalue5 is requested.
    zcl_dyn_remote=&gt;get_field_value( exporting i_fieldname = i_fieldname5 i_structure = i_structure importing e_fieldvalue = e_fieldvalue5 ).
  endif.

  if e_fieldvalue6 is requested.
    zcl_dyn_remote=&gt;get_field_value( exporting i_fieldname = i_fieldname6 i_structure = i_structure importing e_fieldvalue = e_fieldvalue6 ).
  endif.

  if e_fieldvalue7 is requested.
    zcl_dyn_remote=&gt;get_field_value( exporting i_fieldname = i_fieldname7 i_structure = i_structure importing e_fieldvalue = e_fieldvalue7 ).
  endif.

  if e_fieldvalue8 is requested.
    zcl_dyn_remote=&gt;get_field_value( exporting i_fieldname = i_fieldname8 i_structure = i_structure importing e_fieldvalue = e_fieldvalue8 ).
  endif.

  if e_fieldvalue9 is requested.
    zcl_dyn_remote=&gt;get_field_value( exporting i_fieldname = i_fieldname9 i_structure = i_structure importing e_fieldvalue = e_fieldvalue9 ).
  endif.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_REMOTE_STRUC_DATA" VERSION="1" LANGU="E" DESCRIPT="Get Remote Structure Data (Select Single)" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_REMOTE_STRUC_DATA" SCONAME="I_RFC_DESTINATION" VERSION="1" LANGU="E" DESCRIPT="Logical Destination (Specified in Function Call)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="RFCDEST"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_REMOTE_STRUC_DATA" SCONAME="I_TABLE" VERSION="1" LANGU="E" DESCRIPT="Name of a structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRUKNAME"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_REMOTE_STRUC_DATA" SCONAME="I_QUERY" VERSION="1" LANGU="E" DESCRIPT="Table type for RFC_DB_OPT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ZRFC_DB_OPT_T"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_REMOTE_STRUC_DATA" SCONAME="I_DATA_LENGTH" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="I" PARVALUE="100"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_REMOTE_STRUC_DATA" SCONAME="E_STRUC" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY"/>
   <exception CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_REMOTE_STRUC_DATA" SCONAME="CX_PARAMETER_INVALID_RANGE" VERSION="1" LANGU="E" DESCRIPT="Parameter mit ungültigem Wertebereich" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_REMOTE_STRUC_DATA" SCONAME="ZCX_DYN_REMOTE_TYPE_BUILDER" VERSION="1" LANGU="E" DESCRIPT="Dynamic Type Builder Exception" MTDTYPE="0" EDITORDER="2 "/>
   <exception CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_REMOTE_STRUC_DATA" SCONAME="ZCX_DYN_REMOTE" VERSION="1" LANGU="E" DESCRIPT="Dynamic Remote Exception" MTDTYPE="0" EDITORDER="3 "/>
   <source>method GET_REMOTE_STRUC_DATA.

  data: lx_pir type ref to cx_parameter_invalid_range.

  data: lt_field    type standard table of rfc_db_fld,
        lt_rfcfield type standard table of rfc_db_fld,
        lt_data     type standard table of tab512,
        ls_data     type tab512,
        ls_rfcfield type rfc_db_fld,
        ls_field    type rfc_db_fld,
        lv_tabix    type sytabix,
        lv_len      type i,
        lv_tot      type i.

  data: lo_strucdata type ref to data.

  field-symbols: &lt;fs_line&gt;   type any,
                 &lt;fs_efield&gt; type any,
                 &lt;fs_field&gt;  type any.

  try.

*     prepare output
      zcl_dyn_remote_type_builder=&gt;build_data( exporting i_rfcdest = i_rfc_destination i_struct = i_table importing e_strucdata = lo_strucdata ).

      assign: lo_strucdata-&gt;* to &lt;fs_line&gt;.

*     get fields
      lt_field = zcl_dyn_remote=&gt;get_remote_table_fields( i_rfc_destination = i_rfc_destination i_table = i_table ).

      describe table lt_field lines lv_tot.

      loop at lt_field into ls_field.

*       get line index
        lv_tabix = sy-tabix.

*       get total fields length
        lv_len = lv_len + ls_field-length.

*       check limit of data line in rfc_read_data (real 512)
        if lv_len lt i_data_length.
          clear: ls_field-length.
          append ls_field to lt_rfcfield.
        endif.

*       over limit or last line -&gt; start getting data for this fields
        if lv_len ge i_data_length or lv_tabix eq lv_tot.

*         remote read table
          zcl_dyn_remote=&gt;rfc_read_table( exporting i_rfc_destination = i_rfc_destination i_table = i_table i_option = i_query changing c_field = lt_rfcfield c_data = lt_data ).

*         map data
          read table lt_data index 1 into ls_data.

          if sy-subrc ne 0.
            exit.
          endif.

          loop at lt_rfcfield into ls_rfcfield.

            assign component ls_rfcfield-fieldname of structure &lt;fs_line&gt; to &lt;fs_field&gt;.

            if sy-subrc ne 0.

              raise exception type zcx_dyn_remote
                 exporting
                   textid          = zcx_dyn_remote=&gt;no_field
                   table           = i_table
                   field           = ls_field-fieldname.

            endif.

            &lt;fs_field&gt; = ls_data+ls_rfcfield-offset(ls_rfcfield-length).

*           transfer result - dynamically typed and moved to prevent misfield association - could dump if se24 tested without a concrete local data type specified
            assign component ls_rfcfield-fieldname of structure e_struc to &lt;fs_efield&gt;.

            if sy-subrc eq 0.
              &lt;fs_efield&gt; = &lt;fs_field&gt;.
            endif.

            clear: ls_rfcfield.
          endloop.

          refresh: lt_rfcfield.

          if lv_tabix ne lv_tot.
            lv_len = ls_field-length.
            clear: ls_field-length.
            append ls_field to lt_rfcfield.
          endif.

        endif.

        refresh: lt_data.
        clear: ls_field.
      endloop.

    catch cx_sy_assign_cast_illegal_cast
          cx_sy_assign_cast_unknown_type
          cx_sy_assign_out_of_range.

      raise exception type zcx_dyn_remote
        exporting
          textid = zcx_dyn_remote=&gt;assign_failed.

    catch cx_parameter_invalid_range into lx_pir.

      raise exception lx_pir.

  endtry.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_REMOTE_TABLE_DATA" VERSION="1" LANGU="E" DESCRIPT="Get Remote Table Data (Select)" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_REMOTE_TABLE_DATA" SCONAME="I_RFC_DESTINATION" VERSION="1" LANGU="E" DESCRIPT="Logical Destination (Specified in Function Call)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="RFCDEST"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_REMOTE_TABLE_DATA" SCONAME="I_TABLE" VERSION="1" LANGU="E" DESCRIPT="Name of a structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRUKNAME"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_REMOTE_TABLE_DATA" SCONAME="I_QUERY" VERSION="1" LANGU="E" DESCRIPT="Table type for RFC_DB_OPT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ZRFC_DB_OPT_T"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_REMOTE_TABLE_DATA" SCONAME="I_DATA_LENGTH" VERSION="1" LANGU="E" DESCRIPT="Package Length To Process (TAB512 limit)" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="I" PARVALUE="100"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_REMOTE_TABLE_DATA" SCONAME="E_TABLE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="STANDARD TABLE"/>
   <exception CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_REMOTE_TABLE_DATA" SCONAME="CX_PARAMETER_INVALID_RANGE" VERSION="1" LANGU="E" DESCRIPT="Parameter mit ungültigem Wertebereich" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_REMOTE_TABLE_DATA" SCONAME="ZCX_DYN_REMOTE_TYPE_BUILDER" VERSION="1" LANGU="E" DESCRIPT="Dynamic Type Builder Exception" MTDTYPE="0" EDITORDER="2 "/>
   <exception CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_REMOTE_TABLE_DATA" SCONAME="ZCX_DYN_REMOTE" VERSION="1" LANGU="E" DESCRIPT="Dynamic Remote Exception" MTDTYPE="0" EDITORDER="3 "/>
   <source>method GET_REMOTE_TABLE_DATA.

  data: lx_pir type ref to cx_parameter_invalid_range.

  data: lt_field    type standard table of rfc_db_fld,
        lt_rfcfield type standard table of rfc_db_fld,
        lt_data     type standard table of tab512,
        ls_data     type tab512,
        ls_field    type rfc_db_fld,
        ls_rfcfield type rfc_db_fld,
        lv_len      type i,
        lv_tabix    type sytabix,
        lv_databix  type sytabix,
        lv_fgroup   type i,
        lv_tot      type i.

  data: lo_strucdata  type ref to data,
        lo_rstrucdata type ref to data.

  field-symbols: &lt;fs_line&gt;  type any,
                 &lt;fs_rline&gt; type any,
                 &lt;fs_field&gt; type any.

  try.

*     build runtime structure of table passed
      lo_rstrucdata = zcl_dyn_remote=&gt;build_runtime_data( i_table = e_table ).

      assign lo_rstrucdata-&gt;* to &lt;fs_rline&gt;.

*     prepare output
      zcl_dyn_remote_type_builder=&gt;build_data( exporting i_rfcdest = i_rfc_destination i_struct = i_table importing e_strucdata = lo_strucdata ).

      assign: lo_strucdata-&gt;* to &lt;fs_line&gt;.

*     get fields
      lt_field = zcl_dyn_remote=&gt;get_remote_table_fields( i_rfc_destination = i_rfc_destination i_table = i_table ).

      describe table lt_field lines lv_tot.

      loop at lt_field into ls_field.

*       get line index
        lv_tabix = sy-tabix.

*       get total fields length
        lv_len = lv_len + ls_field-length.

*       check limit of data line in rfc_read_data (real 512)
        if lv_len lt i_data_length.
          clear: ls_field-length.
          append ls_field to lt_rfcfield.
        endif.

*       over limit or last line -&gt; start getting data for this fields
        if lv_len ge i_data_length or lv_tabix eq lv_tot.

*         increase field group index (nb: initialized to 0!)
          add 1 to lv_fgroup.

*         remote read table
          zcl_dyn_remote=&gt;rfc_read_table( exporting i_rfc_destination = i_rfc_destination i_table = i_table i_option = i_query changing c_field = lt_rfcfield c_data = lt_data ).

*         map data
          loop at lt_data into ls_data.

            lv_databix = sy-tabix.

            loop at lt_rfcfield into ls_rfcfield.

              assign component ls_rfcfield-fieldname of structure &lt;fs_line&gt; to &lt;fs_field&gt;.

              if sy-subrc ne 0.

                raise exception type zcx_dyn_remote
                   exporting
                     textid          = zcx_dyn_remote=&gt;no_field
                     table           = i_table
                     field           = ls_rfcfield-fieldname.

              endif.

              &lt;fs_field&gt; = ls_data+ls_rfcfield-offset(ls_rfcfield-length).

              clear: ls_rfcfield.
            endloop.

*           transfer result - dynamically typed and moved to prevent misfield association - could dump if se24 tested without a concrete local data type specified
            move-corresponding &lt;fs_line&gt; to &lt;fs_rline&gt;.

*           first field group -&gt; append
            if lv_fgroup eq 1.
              append &lt;fs_rline&gt; to e_table.
*             get line index &amp; map new fields
            else.

              loop at lt_rfcfield into ls_rfcfield.
*               transfer result - dynamically typed and moved to prevent misfield association - could dump if se24 tested without a concrete local data type specified
                modify e_table index lv_databix from &lt;fs_rline&gt; transporting (ls_rfcfield-fieldname).
                clear: ls_rfcfield.
              endloop.

            endif.

            clear: ls_data.
          endloop.

          refresh: lt_rfcfield.

          if lv_tabix ne lv_tot.
            lv_len = ls_field-length.
            clear: ls_field-length.
            append ls_field to lt_rfcfield.
          endif.

        endif.

        refresh: lt_data.
        clear: ls_field.
      endloop.

    catch cx_sy_assign_cast_illegal_cast
          cx_sy_assign_cast_unknown_type
          cx_sy_assign_out_of_range.

      raise exception type zcx_dyn_remote
        exporting
          textid = zcx_dyn_remote=&gt;assign_failed.

    catch cx_parameter_invalid_range into lx_pir.

      raise exception lx_pir.

  endtry.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_REMOTE_TABLE_FIELDS" VERSION="1" LANGU="E" DESCRIPT="Get Remote Table Fields" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_REMOTE_TABLE_FIELDS" SCONAME="I_RFC_DESTINATION" VERSION="1" LANGU="E" DESCRIPT="Logical Destination (Specified in Function Call)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="RFCDEST"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_REMOTE_TABLE_FIELDS" SCONAME="I_TABLE" VERSION="1" LANGU="E" DESCRIPT="Name of a structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRUKNAME"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_REMOTE_TABLE_FIELDS" SCONAME="R_FIELD" VERSION="1" LANGU="E" DESCRIPT="Table type for rfc_db_fld" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZRFC_DB_FLD_T"/>
   <exception CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_REMOTE_TABLE_FIELDS" SCONAME="CX_PARAMETER_INVALID_RANGE" VERSION="1" LANGU="E" DESCRIPT="Parameter mit ungültigem Wertebereich" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCL_DYN_REMOTE" CMPNAME="GET_REMOTE_TABLE_FIELDS" SCONAME="ZCX_DYN_REMOTE_TYPE_BUILDER" VERSION="1" LANGU="E" DESCRIPT="Dynamic Type Builder Exception" MTDTYPE="0" EDITORDER="2 "/>
   <source>method GET_REMOTE_TABLE_FIELDS.

  data: lx_pir type ref to cx_parameter_invalid_range.

  data: lt_comp  type abap_component_tab,
        ls_comp  type abap_componentdescr,
        ls_field type rfc_db_fld.

  data: lv_offset_pattern type string.

  concatenate zcl_dyn_remote_type_builder=&gt;offset &apos;*&apos; into lv_offset_pattern.

  try.

*     get components
      lt_comp = zcl_dyn_remote_type_builder=&gt;get_components( i_rfcdest = i_rfc_destination  i_struct = i_table ).

*     prepare fields of interest
      loop at lt_comp into ls_comp where name np lv_offset_pattern.
        ls_field-fieldname = ls_comp-name.
        ls_field-length    = ls_comp-type-&gt;length.
        append ls_field to r_field.
        clear: ls_field, ls_comp.
      endloop.

    catch cx_parameter_invalid_range into lx_pir.

      raise exception lx_pir.

  endtry.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_DYN_REMOTE" CMPNAME="RFC_READ_TABLE" VERSION="1" LANGU="E" DESCRIPT="Read Table Content By RFC" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="RFC_READ_TABLE" SCONAME="I_RFC_DESTINATION" VERSION="1" LANGU="E" DESCRIPT="Logical Destination (Specified in Function Call)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="RFCDEST"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="RFC_READ_TABLE" SCONAME="I_TABLE" VERSION="1" LANGU="E" DESCRIPT="Name of a structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRUKNAME"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="RFC_READ_TABLE" SCONAME="I_OPTION" VERSION="1" LANGU="E" DESCRIPT="Table type for RFC_DB_OPT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ZRFC_DB_OPT_T"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="RFC_READ_TABLE" SCONAME="C_FIELD" VERSION="1" LANGU="E" DESCRIPT="Table type for rfc_db_fld" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="ZRFC_DB_FLD_T"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="RFC_READ_TABLE" SCONAME="C_DATA" VERSION="1" LANGU="E" DESCRIPT="Table type for tab512" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="ZTAB512_T"/>
   <exception CLSNAME="ZCL_DYN_REMOTE" CMPNAME="RFC_READ_TABLE" SCONAME="ZCX_DYN_REMOTE" VERSION="1" LANGU="E" DESCRIPT="Warehouse Exception" MTDTYPE="0" EDITORDER="1 "/>
   <source>method RFC_READ_TABLE.

* remote read table
  call function &apos;RFC_READ_TABLE&apos; destination i_rfc_destination
    exporting
      query_table          = i_table
    tables
      options              = i_option
      fields               = c_field
      data                 = c_data
    exceptions
      table_not_available  = 1
      table_without_data   = 2
      option_not_valid     = 3
      field_not_valid      = 4
      not_authorized       = 5
      data_buffer_exceeded = 6
      others               = 7.

  if sy-subrc ne 0.

    raise exception type zcx_dyn_remote
       exporting
         textid          = zcx_dyn_remote=&gt;rfc_read
         rfc_destination = i_rfc_destination
         table           = i_table.

  endif.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_DYN_REMOTE" CMPNAME="SET_FIELD_VALUE" VERSION="1" LANGU="E" DESCRIPT="Set Field Value" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="SET_FIELD_VALUE" SCONAME="I_FIELDNAME" VERSION="1" LANGU="E" DESCRIPT="Field Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FIELDNAME"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="SET_FIELD_VALUE" SCONAME="I_FIELDVALUE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="SET_FIELD_VALUE" SCONAME="C_STRUCTURE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <exception CLSNAME="ZCL_DYN_REMOTE" CMPNAME="SET_FIELD_VALUE" SCONAME="ZCX_DYN_REMOTE" VERSION="1" LANGU="E" DESCRIPT="Dynamic Remote Exception" MTDTYPE="0" EDITORDER="1 "/>
   <source>method SET_FIELD_VALUE.

  field-symbols: &lt;fs_field&gt; type any.

  assign component i_fieldname of structure c_structure to &lt;fs_field&gt;.

  if sy-subrc ne 0.

    raise exception type zcx_dyn_remote
      exporting
        textid = zcx_dyn_remote=&gt;no_field
        field  = i_fieldname.

  endif.

  &lt;fs_field&gt; = i_fieldvalue.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_DYN_REMOTE" CMPNAME="SET_FIELD_VALUES" VERSION="1" LANGU="E" DESCRIPT="Set Field Values" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="SET_FIELD_VALUES" SCONAME="I_FIELDNAME1" VERSION="1" LANGU="E" DESCRIPT="Field Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FIELDNAME"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="SET_FIELD_VALUES" SCONAME="I_FIELDNAME2" VERSION="1" LANGU="E" DESCRIPT="Field Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FIELDNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="SET_FIELD_VALUES" SCONAME="I_FIELDNAME3" VERSION="1" LANGU="E" DESCRIPT="Field Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FIELDNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="SET_FIELD_VALUES" SCONAME="I_FIELDNAME4" VERSION="1" LANGU="E" DESCRIPT="Field Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FIELDNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="SET_FIELD_VALUES" SCONAME="I_FIELDNAME5" VERSION="1" LANGU="E" DESCRIPT="Field Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FIELDNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="SET_FIELD_VALUES" SCONAME="I_FIELDNAME6" VERSION="1" LANGU="E" DESCRIPT="Field Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FIELDNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="SET_FIELD_VALUES" SCONAME="I_FIELDNAME7" VERSION="1" LANGU="E" DESCRIPT="Field Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FIELDNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="SET_FIELD_VALUES" SCONAME="I_FIELDNAME8" VERSION="1" LANGU="E" DESCRIPT="Field Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="8 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FIELDNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="SET_FIELD_VALUES" SCONAME="I_FIELDNAME9" VERSION="1" LANGU="E" DESCRIPT="Field Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="9 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FIELDNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="SET_FIELD_VALUES" SCONAME="I_FIELDVALUE1" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="10 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="SET_FIELD_VALUES" SCONAME="I_FIELDVALUE2" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="11 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="SET_FIELD_VALUES" SCONAME="I_FIELDVALUE3" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="12 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="SET_FIELD_VALUES" SCONAME="I_FIELDVALUE4" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="13 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="SET_FIELD_VALUES" SCONAME="I_FIELDVALUE5" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="14 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="SET_FIELD_VALUES" SCONAME="I_FIELDVALUE6" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="15 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="SET_FIELD_VALUES" SCONAME="I_FIELDVALUE7" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="16 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="SET_FIELD_VALUES" SCONAME="I_FIELDVALUE8" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="17 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="SET_FIELD_VALUES" SCONAME="I_FIELDVALUE9" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="18 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_DYN_REMOTE" CMPNAME="SET_FIELD_VALUES" SCONAME="C_STRUCTURE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="19 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <exception CLSNAME="ZCL_DYN_REMOTE" CMPNAME="SET_FIELD_VALUES" SCONAME="ZCX_DYN_REMOTE" VERSION="1" LANGU="E" DESCRIPT="Dynamic Remote Exception" MTDTYPE="0" EDITORDER="1 "/>
   <source>method SET_FIELD_VALUES.

  if not i_fieldname1 is initial and not i_fieldvalue1 is initial.
    zcl_dyn_remote=&gt;set_field_value( exporting i_fieldname = i_fieldname1 i_fieldvalue = i_fieldvalue1 changing c_structure = c_structure ).
  endif.

  if not i_fieldname2 is initial and not i_fieldvalue2 is initial.
    zcl_dyn_remote=&gt;set_field_value( exporting i_fieldname = i_fieldname2 i_fieldvalue = i_fieldvalue2 changing c_structure = c_structure ).
  endif.

  if not i_fieldname3 is initial and not i_fieldvalue3 is initial.
    zcl_dyn_remote=&gt;set_field_value( exporting i_fieldname = i_fieldname3 i_fieldvalue = i_fieldvalue3 changing c_structure = c_structure ).
  endif.

  if not i_fieldname4 is initial and not i_fieldvalue4 is initial.
    zcl_dyn_remote=&gt;set_field_value( exporting i_fieldname = i_fieldname4 i_fieldvalue = i_fieldvalue4 changing c_structure = c_structure ).
  endif.

  if not i_fieldname5 is initial and not i_fieldvalue5 is initial.
    zcl_dyn_remote=&gt;set_field_value( exporting i_fieldname = i_fieldname5 i_fieldvalue = i_fieldvalue5 changing c_structure = c_structure ).
  endif.

  if not i_fieldname6 is initial and not i_fieldvalue6 is initial.
    zcl_dyn_remote=&gt;set_field_value( exporting i_fieldname = i_fieldname6 i_fieldvalue = i_fieldvalue6 changing c_structure = c_structure ).
  endif.

  if not i_fieldname7 is initial and not i_fieldvalue7 is initial.
    zcl_dyn_remote=&gt;set_field_value( exporting i_fieldname = i_fieldname7 i_fieldvalue = i_fieldvalue7 changing c_structure = c_structure ).
  endif.

  if not i_fieldname8 is initial and not i_fieldvalue8 is initial.
    zcl_dyn_remote=&gt;set_field_value( exporting i_fieldname = i_fieldname8 i_fieldvalue = i_fieldvalue8 changing c_structure = c_structure ).
  endif.

  if not i_fieldname9 is initial and not i_fieldvalue9 is initial.
    zcl_dyn_remote=&gt;set_field_value( exporting i_fieldname = i_fieldname9 i_fieldvalue = i_fieldvalue9 changing c_structure = c_structure ).
  endif.

  endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_ELEMDESCR_COLL_ITERATOR" VERSION="1" LANGU="E" DESCRIPT="Element Descriptor Collection Iterator" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_ELEMDESCR_COLL_ITERATOR" CMPNAME="COLLECTION" VERSION="1" LANGU="E" DESCRIPT="Element Descriptor Collection" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_ELEMDESCR_COLLECTION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_ELEMDESCR_COLL_ITERATOR" CMPNAME="INDEX" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="I" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_ELEMDESCR_COLL_ITERATOR" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="Iterator Builder" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ELEMDESCR_COLL_ITERATOR" CMPNAME="CONSTRUCTOR" SCONAME="COLLECTION" VERSION="1" LANGU="E" DESCRIPT="Element Descriptor Collection" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_ELEMDESCR_COLLECTION"/>
   <source>method CONSTRUCTOR.

  me-&gt;collection = collection.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ELEMDESCR_COLL_ITERATOR" CMPNAME="GET_INDEX" VERSION="1" LANGU="E" DESCRIPT="Get Current Index" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ELEMDESCR_COLL_ITERATOR" CMPNAME="GET_INDEX" SCONAME="INDEX" VERSION="1" LANGU="E" DESCRIPT="Natural Number" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="INT4"/>
   <source>method GET_INDEX.

  index = me-&gt;index.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ELEMDESCR_COLL_ITERATOR" CMPNAME="GET_NEXT" VERSION="1" LANGU="E" DESCRIPT="Get Next Object" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ELEMDESCR_COLL_ITERATOR" CMPNAME="GET_NEXT" SCONAME="ELEMDESCR" VERSION="1" LANGU="E" DESCRIPT="Element Descriptor Structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZCS_ABAP_ELEMDESCR"/>
   <source>method GET_NEXT.

  IF me-&gt;has_next( ) EQ &apos;X&apos;.
    ADD 1 TO me-&gt;index.
    elemdescr = me-&gt;collection-&gt;get_by_index( me-&gt;index ).
  ENDIF.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ELEMDESCR_COLL_ITERATOR" CMPNAME="HAS_NEXT" VERSION="1" LANGU="E" DESCRIPT="Has Next Object" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ELEMDESCR_COLL_ITERATOR" CMPNAME="HAS_NEXT" SCONAME="HAS_NEXT" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="FLAG"/>
   <source>method HAS_NEXT.

  DATA: ls_elemdescr TYPE zcs_abap_elemdescr,
        lv_index     TYPE i.

  lv_index = me-&gt;index + 1.

  ls_elemdescr = me-&gt;collection-&gt;get_by_index( lv_index ).

  IF NOT ls_elemdescr IS INITIAL.
    has_next = &apos;X&apos;.
  ENDIF.

  endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_ELEMDESCR_COLLECTION" VERSION="1" LANGU="E" DESCRIPT="Element Descriptor Collection" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_ELEMDESCR_COLLECTION" CMPNAME="COLLECTION" VERSION="1" LANGU="E" DESCRIPT="Standard Table of Element Descriptors" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZCT_ABAP_ELEMDESCR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_ELEMDESCR_COLLECTION" CMPNAME="ADD" VERSION="1" LANGU="E" DESCRIPT="Add Element Descriptor To Collection" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ELEMDESCR_COLLECTION" CMPNAME="ADD" SCONAME="NAME" VERSION="1" LANGU="E" DESCRIPT="Data element (semantic domain)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ROLLNAME"/>
   <parameter CLSNAME="ZCL_ELEMDESCR_COLLECTION" CMPNAME="ADD" SCONAME="DESCRIPTOR" VERSION="1" LANGU="E" DESCRIPT="Runtime Type Services" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="3" TYPE="CL_ABAP_ELEMDESCR"/>
   <source>method ADD.

  DATA: ls_elemdescr TYPE zcs_abap_elemdescr.

  ls_elemdescr-name = name.
  ls_elemdescr-descriptor = descriptor.

  APPEND ls_elemdescr TO me-&gt;collection.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ELEMDESCR_COLLECTION" CMPNAME="EMPTY" VERSION="1" LANGU="E" DESCRIPT="Initializa The Collection" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method EMPTY.

  FIELD-SYMBOLS: &lt;fs_elemdescr&gt; TYPE zcs_abap_elemdescr.

  LOOP AT me-&gt;collection ASSIGNING &lt;fs_elemdescr&gt;.
    FREE: &lt;fs_elemdescr&gt;-descriptor.
  ENDLOOP.

  REFRESH: me-&gt;collection.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ELEMDESCR_COLLECTION" CMPNAME="GET_BY_INDEX" VERSION="1" LANGU="E" DESCRIPT="Get Element Descriptor By Name" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ELEMDESCR_COLLECTION" CMPNAME="GET_BY_INDEX" SCONAME="INDEX" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="I"/>
   <parameter CLSNAME="ZCL_ELEMDESCR_COLLECTION" CMPNAME="GET_BY_INDEX" SCONAME="ELEMDESCR" VERSION="1" LANGU="E" DESCRIPT="Element Descriptor Structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZCS_ABAP_ELEMDESCR"/>
   <source>method GET_BY_INDEX.

  READ TABLE me-&gt;collection INDEX index INTO elemdescr.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ELEMDESCR_COLLECTION" CMPNAME="GET_BY_NAME" VERSION="1" LANGU="E" DESCRIPT="Get Element Descriptor By Name" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ELEMDESCR_COLLECTION" CMPNAME="GET_BY_NAME" SCONAME="NAME" VERSION="1" LANGU="E" DESCRIPT="Data element (semantic domain)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ROLLNAME"/>
   <parameter CLSNAME="ZCL_ELEMDESCR_COLLECTION" CMPNAME="GET_BY_NAME" SCONAME="ELEMDESCR" VERSION="1" LANGU="E" DESCRIPT="Element Descriptor Structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZCS_ABAP_ELEMDESCR"/>
   <source>method GET_BY_NAME.

  READ TABLE me-&gt;collection INTO elemdescr WITH KEY name = name.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ELEMDESCR_COLLECTION" CMPNAME="GET_ITERATOR" VERSION="1" LANGU="E" DESCRIPT="Returns an Iterator" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ELEMDESCR_COLLECTION" CMPNAME="GET_ITERATOR" SCONAME="ITERATOR" VERSION="1" LANGU="E" DESCRIPT="Element Descriptor Collection Iterator" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_ELEMDESCR_COLL_ITERATOR"/>
   <source>method GET_ITERATOR.

  CREATE OBJECT iterator EXPORTING collection = me.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ELEMDESCR_COLLECTION" CMPNAME="IS_EMPTY" VERSION="1" LANGU="E" DESCRIPT="Collection is Empty ?" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ELEMDESCR_COLLECTION" CMPNAME="IS_EMPTY" SCONAME="IS_EMPTY" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="FLAG"/>
   <source>method IS_EMPTY.

  IF LINES( me-&gt;collection ) EQ 0.
    is_empty = &apos;X&apos;.
  ENDIF.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ELEMDESCR_COLLECTION" CMPNAME="REMOVE_BY_INDEX" VERSION="1" LANGU="E" DESCRIPT="Remove Element Descriptor From Collection By Index" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ELEMDESCR_COLLECTION" CMPNAME="REMOVE_BY_INDEX" SCONAME="INDEX" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="I"/>
   <source>method REMOVE_BY_INDEX.

  FIELD-SYMBOLS: &lt;fs_elemdescr&gt; TYPE zcs_abap_elemdescr.

  READ TABLE me-&gt;collection ASSIGNING &lt;fs_elemdescr&gt; INDEX index.

  IF sy-subrc EQ 0.
    FREE: &lt;fs_elemdescr&gt;-descriptor.
    DELETE me-&gt;collection INDEX index.
  ENDIF.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ELEMDESCR_COLLECTION" CMPNAME="REMOVE_BY_NAME" VERSION="1" LANGU="E" DESCRIPT="Remove Element Descriptor From Collection By Name" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ELEMDESCR_COLLECTION" CMPNAME="REMOVE_BY_NAME" SCONAME="NAME" VERSION="1" LANGU="E" DESCRIPT="Data element (semantic domain)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ROLLNAME"/>
   <source>method REMOVE_BY_NAME.

  FIELD-SYMBOLS: &lt;fs_elemdescr&gt; TYPE zcs_abap_elemdescr.

  READ TABLE me-&gt;collection ASSIGNING &lt;fs_elemdescr&gt; WITH KEY name = name.

  IF sy-subrc EQ 0.
    FREE: &lt;fs_elemdescr&gt;-descriptor.
    DELETE me-&gt;collection INDEX sy-tabix.
  ENDIF.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_ELEMDESCR_COLLECTION" CMPNAME="SIZE" VERSION="1" LANGU="E" DESCRIPT="Get Size of Collection" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_ELEMDESCR_COLLECTION" CMPNAME="SIZE" SCONAME="SIZE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="I"/>
   <source>method SIZE.

  size = LINES( me-&gt;collection ).

  endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_TABLEDESCR_COLL_ITERATOR" VERSION="1" LANGU="E" DESCRIPT="Structure Descriptor Collection Iterator" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_TABLEDESCR_COLL_ITERATOR" CMPNAME="COLLECTION" VERSION="1" LANGU="E" DESCRIPT="Structure Descriptor Collection" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_TABLEDESCR_COLLECTION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_TABLEDESCR_COLL_ITERATOR" CMPNAME="INDEX" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="I" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_TABLEDESCR_COLL_ITERATOR" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="Iterator Builder" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TABLEDESCR_COLL_ITERATOR" CMPNAME="CONSTRUCTOR" SCONAME="COLLECTION" VERSION="1" LANGU="E" DESCRIPT="Structure Descriptor Collection" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_TABLEDESCR_COLLECTION"/>
   <source>method CONSTRUCTOR.

  me-&gt;collection = collection.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_TABLEDESCR_COLL_ITERATOR" CMPNAME="GET_INDEX" VERSION="1" LANGU="E" DESCRIPT="Get Current Index" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TABLEDESCR_COLL_ITERATOR" CMPNAME="GET_INDEX" SCONAME="INDEX" VERSION="1" LANGU="E" DESCRIPT="Natural Number" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="INT4"/>
   <source>method GET_INDEX.

  index = me-&gt;index.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_TABLEDESCR_COLL_ITERATOR" CMPNAME="GET_NEXT" VERSION="1" LANGU="E" DESCRIPT="Get Next Object" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TABLEDESCR_COLL_ITERATOR" CMPNAME="GET_NEXT" SCONAME="TABLEDESCR" VERSION="1" LANGU="E" DESCRIPT="Table Descriptor Structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZCS_ABAP_TABLEDESCR"/>
   <source>method GET_NEXT.

  IF me-&gt;has_next( ) EQ &apos;X&apos;.
    ADD 1 TO me-&gt;index.
    tabledescr = me-&gt;collection-&gt;get_by_index( me-&gt;index ).
  ENDIF.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_TABLEDESCR_COLL_ITERATOR" CMPNAME="HAS_NEXT" VERSION="1" LANGU="E" DESCRIPT="Has Next Object" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TABLEDESCR_COLL_ITERATOR" CMPNAME="HAS_NEXT" SCONAME="HAS_NEXT" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="FLAG"/>
   <source>method HAS_NEXT.

  DATA: ls_tabledescr TYPE zcs_abap_tabledescr,
        lv_index       TYPE i.

  lv_index = me-&gt;index + 1.

  ls_tabledescr = me-&gt;collection-&gt;get_by_index( lv_index ).

  IF NOT ls_tabledescr IS INITIAL.
    has_next = &apos;X&apos;.
  ENDIF.

  endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_TABLEDESCR_COLLECTION" VERSION="1" LANGU="E" DESCRIPT="Structure Descriptor Collection" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_TABLEDESCR_COLLECTION" CMPNAME="COLLECTION" VERSION="1" LANGU="E" DESCRIPT="Standard Table of Table Descriptors" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZCT_ABAP_TABLEDESCR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_TABLEDESCR_COLLECTION" CMPNAME="ADD" VERSION="1" LANGU="E" DESCRIPT="Add Element Descriptor To Collection" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TABLEDESCR_COLLECTION" CMPNAME="ADD" SCONAME="NAME" VERSION="1" LANGU="E" DESCRIPT="Name of a structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRUKNAME"/>
   <parameter CLSNAME="ZCL_TABLEDESCR_COLLECTION" CMPNAME="ADD" SCONAME="DESCRIPTOR" VERSION="1" LANGU="E" DESCRIPT="Runtime Type Services" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="3" TYPE="CL_ABAP_TABLEDESCR"/>
   <source>method ADD.

  DATA: ls_tabledescr TYPE zcs_abap_tabledescr.

  ls_tabledescr-name = name.
  ls_tabledescr-descriptor = descriptor.

  APPEND ls_tabledescr TO me-&gt;collection.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_TABLEDESCR_COLLECTION" CMPNAME="EMPTY" VERSION="1" LANGU="E" DESCRIPT="Initializa The Collection" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method EMPTY.

  FIELD-SYMBOLS: &lt;fs_tabledescr&gt; TYPE zcs_abap_tabledescr.

  LOOP AT me-&gt;collection ASSIGNING &lt;fs_tabledescr&gt;.
    FREE: &lt;fs_tabledescr&gt;-descriptor.
  ENDLOOP.

  REFRESH: me-&gt;collection.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_TABLEDESCR_COLLECTION" CMPNAME="GET_BY_INDEX" VERSION="1" LANGU="E" DESCRIPT="Get Element Descriptor By Name" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TABLEDESCR_COLLECTION" CMPNAME="GET_BY_INDEX" SCONAME="INDEX" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="I"/>
   <parameter CLSNAME="ZCL_TABLEDESCR_COLLECTION" CMPNAME="GET_BY_INDEX" SCONAME="TABLEDESCR" VERSION="1" LANGU="E" DESCRIPT="Table Descriptor Structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZCS_ABAP_TABLEDESCR"/>
   <source>method GET_BY_INDEX.

  READ TABLE me-&gt;collection INDEX index INTO tabledescr.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_TABLEDESCR_COLLECTION" CMPNAME="GET_BY_NAME" VERSION="1" LANGU="E" DESCRIPT="Get Element Descriptor By Name" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TABLEDESCR_COLLECTION" CMPNAME="GET_BY_NAME" SCONAME="NAME" VERSION="1" LANGU="E" DESCRIPT="Table Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="TABNAME"/>
   <parameter CLSNAME="ZCL_TABLEDESCR_COLLECTION" CMPNAME="GET_BY_NAME" SCONAME="TABLEDESCR" VERSION="1" LANGU="E" DESCRIPT="Table Descriptor Structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZCS_ABAP_TABLEDESCR"/>
   <source>method GET_BY_NAME.

  READ TABLE me-&gt;collection INTO tabledescr WITH KEY name = name.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_TABLEDESCR_COLLECTION" CMPNAME="GET_ITERATOR" VERSION="1" LANGU="E" DESCRIPT="Returns an Iterator" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TABLEDESCR_COLLECTION" CMPNAME="GET_ITERATOR" SCONAME="ITERATOR" VERSION="1" LANGU="E" DESCRIPT="Structure Descriptor Collection Iterator" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_TABLEDESCR_COLL_ITERATOR"/>
   <source>method GET_ITERATOR.

  CREATE OBJECT iterator EXPORTING collection = me.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_TABLEDESCR_COLLECTION" CMPNAME="IS_EMPTY" VERSION="1" LANGU="E" DESCRIPT="Collection is Empty ?" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TABLEDESCR_COLLECTION" CMPNAME="IS_EMPTY" SCONAME="IS_EMPTY" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="FLAG"/>
   <source>method IS_EMPTY.

  IF LINES( me-&gt;collection ) EQ 0.
    is_empty = &apos;X&apos;.
  ENDIF.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_TABLEDESCR_COLLECTION" CMPNAME="REMOVE_BY_INDEX" VERSION="1" LANGU="E" DESCRIPT="Remove Element Descriptor From Collection By Index" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TABLEDESCR_COLLECTION" CMPNAME="REMOVE_BY_INDEX" SCONAME="INDEX" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="I"/>
   <source>method REMOVE_BY_INDEX.

  FIELD-SYMBOLS: &lt;fs_tabledescr&gt; TYPE zcs_abap_tabledescr.

  READ TABLE me-&gt;collection ASSIGNING &lt;fs_tabledescr&gt; INDEX index.

  IF sy-subrc EQ 0.
    FREE: &lt;fs_tabledescr&gt;-descriptor.
    DELETE me-&gt;collection INDEX index.
  ENDIF.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_TABLEDESCR_COLLECTION" CMPNAME="REMOVE_BY_NAME" VERSION="1" LANGU="E" DESCRIPT="Remove Element Descriptor From Collection By Name" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TABLEDESCR_COLLECTION" CMPNAME="REMOVE_BY_NAME" SCONAME="NAME" VERSION="1" LANGU="E" DESCRIPT="Table Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="TABNAME"/>
   <source>method REMOVE_BY_NAME.

  FIELD-SYMBOLS: &lt;fs_tabledescr&gt; TYPE zcs_abap_tabledescr.

  READ TABLE me-&gt;collection ASSIGNING &lt;fs_tabledescr&gt; WITH KEY name = name.

  IF sy-subrc EQ 0.
    FREE: &lt;fs_tabledescr&gt;-descriptor.
    DELETE me-&gt;collection INDEX sy-tabix.
  ENDIF.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_TABLEDESCR_COLLECTION" CMPNAME="SIZE" VERSION="1" LANGU="E" DESCRIPT="Get Size of Collection" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TABLEDESCR_COLLECTION" CMPNAME="SIZE" SCONAME="SIZE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="I"/>
   <source>method SIZE.

  size = LINES( me-&gt;collection ).

  endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_STRUCTDESCR_COLLECTION" VERSION="1" LANGU="E" DESCRIPT="Structure Descriptor Collection" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_STRUCTDESCR_COLLECTION" CMPNAME="COLLECTION" VERSION="1" LANGU="E" DESCRIPT="Standard Table of Structure Descriptors" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZCT_ABAP_STRUCTDESCR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_STRUCTDESCR_COLLECTION" CMPNAME="ADD" VERSION="1" LANGU="E" DESCRIPT="Add Element Descriptor To Collection" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_STRUCTDESCR_COLLECTION" CMPNAME="ADD" SCONAME="NAME" VERSION="1" LANGU="E" DESCRIPT="Name of a structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRUKNAME"/>
   <parameter CLSNAME="ZCL_STRUCTDESCR_COLLECTION" CMPNAME="ADD" SCONAME="DESCRIPTOR" VERSION="1" LANGU="E" DESCRIPT="Runtime Type Services" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="3" TYPE="CL_ABAP_STRUCTDESCR"/>
   <source>method ADD.

  DATA: ls_structdescr TYPE zcs_abap_structdescr.

  ls_structdescr-name = name.
  ls_structdescr-descriptor = descriptor.

  APPEND ls_structdescr TO me-&gt;collection.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_STRUCTDESCR_COLLECTION" CMPNAME="EMPTY" VERSION="1" LANGU="E" DESCRIPT="Initializa The Collection" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method EMPTY.

  FIELD-SYMBOLS: &lt;fs_structdescr&gt; TYPE zcs_abap_structdescr.

  LOOP AT me-&gt;collection ASSIGNING &lt;fs_structdescr&gt;.
    FREE: &lt;fs_structdescr&gt;-descriptor.
  ENDLOOP.

  REFRESH: me-&gt;collection.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_STRUCTDESCR_COLLECTION" CMPNAME="GET_BY_INDEX" VERSION="1" LANGU="E" DESCRIPT="Get Element Descriptor By Name" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_STRUCTDESCR_COLLECTION" CMPNAME="GET_BY_INDEX" SCONAME="INDEX" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="I"/>
   <parameter CLSNAME="ZCL_STRUCTDESCR_COLLECTION" CMPNAME="GET_BY_INDEX" SCONAME="STRUCTDESCR" VERSION="1" LANGU="E" DESCRIPT="Structure Descriptor Structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZCS_ABAP_STRUCTDESCR"/>
   <source>method GET_BY_INDEX.

  READ TABLE me-&gt;collection INDEX index INTO structdescr.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_STRUCTDESCR_COLLECTION" CMPNAME="GET_BY_NAME" VERSION="1" LANGU="E" DESCRIPT="Get Element Descriptor By Name" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_STRUCTDESCR_COLLECTION" CMPNAME="GET_BY_NAME" SCONAME="NAME" VERSION="1" LANGU="E" DESCRIPT="Name of a structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRUKNAME"/>
   <parameter CLSNAME="ZCL_STRUCTDESCR_COLLECTION" CMPNAME="GET_BY_NAME" SCONAME="STRUCTDESCR" VERSION="1" LANGU="E" DESCRIPT="Structure Descriptor Structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZCS_ABAP_STRUCTDESCR"/>
   <source>method GET_BY_NAME.

  READ TABLE me-&gt;collection INTO structdescr WITH KEY name = name.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_STRUCTDESCR_COLLECTION" CMPNAME="GET_ITERATOR" VERSION="1" LANGU="E" DESCRIPT="Returns an Iterator" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_STRUCTDESCR_COLLECTION" CMPNAME="GET_ITERATOR" SCONAME="ITERATOR" VERSION="1" LANGU="E" DESCRIPT="Structure Descriptor Collection Iterator" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_STRUCTDESCR_COLL_ITERATOR"/>
   <source>method GET_ITERATOR.

  CREATE OBJECT iterator EXPORTING collection = me.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_STRUCTDESCR_COLLECTION" CMPNAME="IS_EMPTY" VERSION="1" LANGU="E" DESCRIPT="Collection is Empty ?" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_STRUCTDESCR_COLLECTION" CMPNAME="IS_EMPTY" SCONAME="IS_EMPTY" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="FLAG"/>
   <source>method IS_EMPTY.

  IF LINES( me-&gt;collection ) EQ 0.
    is_empty = &apos;X&apos;.
  ENDIF.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_STRUCTDESCR_COLLECTION" CMPNAME="REMOVE_BY_INDEX" VERSION="1" LANGU="E" DESCRIPT="Remove Element Descriptor From Collection By Index" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_STRUCTDESCR_COLLECTION" CMPNAME="REMOVE_BY_INDEX" SCONAME="INDEX" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="I"/>
   <source>method REMOVE_BY_INDEX.

  FIELD-SYMBOLS: &lt;fs_structdescr&gt; TYPE zcs_abap_structdescr.

  READ TABLE me-&gt;collection ASSIGNING &lt;fs_structdescr&gt; INDEX index.

  IF sy-subrc EQ 0.
    FREE: &lt;fs_structdescr&gt;-descriptor.
    DELETE me-&gt;collection INDEX index.
  ENDIF.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_STRUCTDESCR_COLLECTION" CMPNAME="REMOVE_BY_NAME" VERSION="1" LANGU="E" DESCRIPT="Remove Element Descriptor From Collection By Name" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_STRUCTDESCR_COLLECTION" CMPNAME="REMOVE_BY_NAME" SCONAME="NAME" VERSION="1" LANGU="E" DESCRIPT="Name of a structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRUKNAME"/>
   <source>method REMOVE_BY_NAME.

  FIELD-SYMBOLS: &lt;fs_structdescr&gt; TYPE zcs_abap_structdescr.

  READ TABLE me-&gt;collection ASSIGNING &lt;fs_structdescr&gt; WITH KEY name = name.

  IF sy-subrc EQ 0.
    FREE: &lt;fs_structdescr&gt;-descriptor.
    DELETE me-&gt;collection INDEX sy-tabix.
  ENDIF.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_STRUCTDESCR_COLLECTION" CMPNAME="SIZE" VERSION="1" LANGU="E" DESCRIPT="Get Size of Collection" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_STRUCTDESCR_COLLECTION" CMPNAME="SIZE" SCONAME="SIZE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="I"/>
   <source>method SIZE.

  size = LINES( me-&gt;collection ).

  endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_STRUCTDESCR_COLL_ITERATOR" VERSION="1" LANGU="E" DESCRIPT="Structure Descriptor Collection Iterator" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_STRUCTDESCR_COLL_ITERATOR" CMPNAME="COLLECTION" VERSION="1" LANGU="E" DESCRIPT="Structure Descriptor Collection" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_STRUCTDESCR_COLLECTION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_STRUCTDESCR_COLL_ITERATOR" CMPNAME="INDEX" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="I" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_STRUCTDESCR_COLL_ITERATOR" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="Iterator Builder" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_STRUCTDESCR_COLL_ITERATOR" CMPNAME="CONSTRUCTOR" SCONAME="COLLECTION" VERSION="1" LANGU="E" DESCRIPT="Structure Descriptor Collection" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_STRUCTDESCR_COLLECTION"/>
   <source>method CONSTRUCTOR.

  me-&gt;collection = collection.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_STRUCTDESCR_COLL_ITERATOR" CMPNAME="GET_INDEX" VERSION="1" LANGU="E" DESCRIPT="Get Current Index" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_STRUCTDESCR_COLL_ITERATOR" CMPNAME="GET_INDEX" SCONAME="INDEX" VERSION="1" LANGU="E" DESCRIPT="Natural Number" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="INT4"/>
   <source>method GET_INDEX.

  index = me-&gt;index.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_STRUCTDESCR_COLL_ITERATOR" CMPNAME="GET_NEXT" VERSION="1" LANGU="E" DESCRIPT="Get Next Object" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_STRUCTDESCR_COLL_ITERATOR" CMPNAME="GET_NEXT" SCONAME="STRUCTDESCR" VERSION="1" LANGU="E" DESCRIPT="Structure Descriptor Structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZCS_ABAP_STRUCTDESCR"/>
   <source>method GET_NEXT.

  IF me-&gt;has_next( ) EQ &apos;X&apos;.
    ADD 1 TO me-&gt;index.
    structdescr = me-&gt;collection-&gt;get_by_index( me-&gt;index ).
  ENDIF.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_STRUCTDESCR_COLL_ITERATOR" CMPNAME="HAS_NEXT" VERSION="1" LANGU="E" DESCRIPT="Has Next Object" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_STRUCTDESCR_COLL_ITERATOR" CMPNAME="HAS_NEXT" SCONAME="HAS_NEXT" VERSION="1" LANGU="E" DESCRIPT="General Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="FLAG"/>
   <source>method HAS_NEXT.

  DATA: ls_structdescr TYPE zcs_abap_structdescr,
        lv_index       TYPE i.

  lv_index = me-&gt;index + 1.

  ls_structdescr = me-&gt;collection-&gt;get_by_index( lv_index ).

  IF NOT ls_structdescr IS INITIAL.
    has_next = &apos;X&apos;.
  ENDIF.

  endmethod.</source>
  </method>
 </CLAS>
 <MSAG ARBGB="ZDYNTYPEBUILDER" MASTERLANG="E" RESPUSER="CO16676">
  <t100 SPRSL="E" ARBGB="ZDYNTYPEBUILDER" MSGNR="000" TEXT="unexpected error"/>
  <t100 SPRSL="I" ARBGB="ZDYNTYPEBUILDER" MSGNR="000" TEXT="errore inatteso"/>
  <t100 SPRSL="E" ARBGB="ZDYNTYPEBUILDER" MSGNR="001" TEXT="rfc destination &amp;1 unreachable"/>
  <t100 SPRSL="I" ARBGB="ZDYNTYPEBUILDER" MSGNR="001" TEXT="destinazione remota &amp;1 irraggiungibile"/>
  <t100 SPRSL="E" ARBGB="ZDYNTYPEBUILDER" MSGNR="002" TEXT="failed to build structure &amp;1"/>
  <t100 SPRSL="I" ARBGB="ZDYNTYPEBUILDER" MSGNR="002" TEXT="fallita generazione struttura &amp;"/>
  <t100 SPRSL="E" ARBGB="ZDYNTYPEBUILDER" MSGNR="003" TEXT="data type &amp;1 not managed"/>
  <t100 SPRSL="I" ARBGB="ZDYNTYPEBUILDER" MSGNR="003" TEXT="tipo dato &amp;1 non gestito"/>
  <t100 SPRSL="E" ARBGB="ZDYNTYPEBUILDER" MSGNR="004" TEXT="internal type &amp;1 not managed"/>
  <t100 SPRSL="I" ARBGB="ZDYNTYPEBUILDER" MSGNR="004" TEXT="tipo dato interno &amp;1 non gestito"/>
  <t100 SPRSL="E" ARBGB="ZDYNTYPEBUILDER" MSGNR="005" TEXT="failed to read details of data element &amp;1"/>
  <t100 SPRSL="I" ARBGB="ZDYNTYPEBUILDER" MSGNR="005" TEXT="fallita lettura dettagli elemento dati &amp;1"/>
  <t100 SPRSL="E" ARBGB="ZDYNTYPEBUILDER" MSGNR="006" TEXT="unable to get dynamic field &amp;1"/>
  <t100 SPRSL="I" ARBGB="ZDYNTYPEBUILDER" MSGNR="006" TEXT="impossibile leggere campo dinamico &amp;1"/>
  <t100 SPRSL="E" ARBGB="ZDYNTYPEBUILDER" MSGNR="007" TEXT="failed to read table &amp;1 on remote destination &amp;2"/>
  <t100 SPRSL="I" ARBGB="ZDYNTYPEBUILDER" MSGNR="007" TEXT="fallita lettura tabella &amp;1 su destinazione remota &amp;2"/>
  <t100 SPRSL="E" ARBGB="ZDYNTYPEBUILDER" MSGNR="008" TEXT="assign instruction for component &amp;1 failed"/>
  <t100 SPRSL="I" ARBGB="ZDYNTYPEBUILDER" MSGNR="008" TEXT="istruzione assign fallita per campo &amp;1"/>
  <t100 SPRSL="E" ARBGB="ZDYNTYPEBUILDER" MSGNR="009" TEXT="failed to build data dynamically"/>
  <t100 SPRSL="I" ARBGB="ZDYNTYPEBUILDER" MSGNR="009" TEXT="fallita creazione dinamica dati"/>
  <t100 SPRSL="E" ARBGB="ZDYNTYPEBUILDER" MSGNR="010" TEXT="assign instruction failed"/>
  <t100 SPRSL="I" ARBGB="ZDYNTYPEBUILDER" MSGNR="010" TEXT="fallita istruzione assign"/>
  <t100 SPRSL="I" ARBGB="ZDYNTYPEBUILDER" MSGNR="011" TEXT="sistema logico proprietario non definito"/>
  <t100 SPRSL="E" ARBGB="ZDYNTYPEBUILDER" MSGNR="011" TEXT="own logical system not defined"/>
  <t100 SPRSL="E" ARBGB="ZDYNTYPEBUILDER" MSGNR="050" TEXT="rfc destination &amp;1 unreachable/not valid"/>
  <t100 SPRSL="I" ARBGB="ZDYNTYPEBUILDER" MSGNR="050" TEXT="destinazione rfc &amp;1 irraggiungibile/non valida"/>
  <t100 SPRSL="I" ARBGB="ZDYNTYPEBUILDER" MSGNR="051" TEXT="impossibile rendere editabile la textarea"/>
  <t100 SPRSL="E" ARBGB="ZDYNTYPEBUILDER" MSGNR="051" TEXT="failed to set textarea editable"/>
  <t100 SPRSL="I" ARBGB="ZDYNTYPEBUILDER" MSGNR="052" TEXT="impossibile inibire l&apos;editazione alla textarea"/>
  <t100 SPRSL="E" ARBGB="ZDYNTYPEBUILDER" MSGNR="052" TEXT="failed to set textarea read-only"/>
  <t100 SPRSL="I" ARBGB="ZDYNTYPEBUILDER" MSGNR="053" TEXT="fallita creazione textarea"/>
  <t100 SPRSL="E" ARBGB="ZDYNTYPEBUILDER" MSGNR="053" TEXT="textarea creation failed"/>
  <t100 SPRSL="I" ARBGB="ZDYNTYPEBUILDER" MSGNR="054" TEXT="fallita creazione container"/>
  <t100 SPRSL="E" ARBGB="ZDYNTYPEBUILDER" MSGNR="054" TEXT="container creation failed"/>
  <t100 SPRSL="E" ARBGB="ZDYNTYPEBUILDER" MSGNR="055" TEXT="table &amp;1 not defined on rfc destination &amp;2"/>
  <t100 SPRSL="I" ARBGB="ZDYNTYPEBUILDER" MSGNR="055" TEXT="tabella &amp;1 non definita su destinazione rfc &amp;2"/>
  <t100 SPRSL="E" ARBGB="ZDYNTYPEBUILDER" MSGNR="056" TEXT="query initial/error reading query"/>
  <t100 SPRSL="I" ARBGB="ZDYNTYPEBUILDER" MSGNR="056" TEXT="query non specificata/errore in fase di lettura query"/>
  <t100 SPRSL="E" ARBGB="ZDYNTYPEBUILDER" MSGNR="057" TEXT="empty selection"/>
  <t100 SPRSL="I" ARBGB="ZDYNTYPEBUILDER" MSGNR="057" TEXT="selezione vuota"/>
  <t100 SPRSL="E" ARBGB="ZDYNTYPEBUILDER" MSGNR="058" TEXT="alv building/detruction failed"/>
  <t100 SPRSL="I" ARBGB="ZDYNTYPEBUILDER" MSGNR="058" TEXT="costruzione/distruzione alv fallita"/>
  <t100 SPRSL="E" ARBGB="ZDYNTYPEBUILDER" MSGNR="059" TEXT="remote data structure building failed"/>
  <t100 SPRSL="I" ARBGB="ZDYNTYPEBUILDER" MSGNR="059" TEXT="fallita costruzione dinamica strutture remote"/>
  <t100 SPRSL="E" ARBGB="ZDYNTYPEBUILDER" MSGNR="060" TEXT="failed to build field catalog"/>
  <t100 SPRSL="I" ARBGB="ZDYNTYPEBUILDER" MSGNR="060" TEXT="fallita costruzione del catalogo campi"/>
  <t100t SPRSL="E" ARBGB="ZDYNTYPEBUILDER"/>
 </MSAG>
 <PROG NAME="ZDYNSRQF01" VARCL="X" SUBC="I" RMAND="350" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Forms" LENGTH="5 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZDYNSRQF01
*&amp;---------------------------------------------------------------------*
form build_fieldcatalog using value(vv_rfc)   type rfcdest
                              value(vv_struk) type strukname

                        changing ct_fcat      type lvc_t_fcat
                                 cv_subrc     type sysubrc.

  clear: cv_subrc.
  refresh: ct_fcat.

  data: ls_field type dfies,
        ls_fcat  type lvc_s_fcat,
        lt_field type standard table of dfies.

  call function &apos;DDIF_FIELDINFO_GET&apos; destination vv_rfc
    exporting
      tabname        = vv_struk
      langu          = sy-langu
    tables
      dfies_tab      = lt_field
    exceptions
      not_found      = 1
      internal_error = 2
      others         = 3.

  if sy-subrc ne 0.
    cv_subrc = 4.
    return.
  endif.

  loop at lt_field into ls_field.
    ls_fcat-col_pos    = ls_field-position.
    ls_fcat-coltext    = ls_field-fieldname.
    ls_fcat-key        = ls_field-keyflag.
    ls_fcat-fieldname  = ls_field-fieldname.
    ls_fcat-seltext    = ls_field-fieldtext.
    ls_fcat-reptext    = ls_field-reptext.
    ls_fcat-scrtext_s  = ls_field-scrtext_s.
    ls_fcat-scrtext_m  = ls_field-scrtext_m.
    ls_fcat-scrtext_l  = ls_field-scrtext_l.
    append ls_fcat to ct_fcat.
    clear: ls_field, ls_fcat.
  endloop.

endform.                    &quot;build_fieldcatalog

*&amp;--------------------------------------------------------------------*
*&amp;      Form  alv_create
*&amp;--------------------------------------------------------------------*
*       text
*---------------------------------------------------------------------*
*      --&gt;VALUE(VV_COtextME)
*      --&gt;CO_CONTAINEtext
*      --&gt;CO_ALV     text
*      --&gt;CV_SUBRC   text
*---------------------------------------------------------------------*
form alv_create using value(vv_contname)    type char10

                      changing co_container type ref to cl_gui_custom_container
                               co_alv       type ref to cl_gui_alv_grid
                               cv_subrc     type sysubrc.

  clear cv_subrc.

  create object co_container
    exporting
      container_name              = vv_contname
    exceptions
      cntl_error                  = 1
      cntl_system_error           = 2
      create_error                = 3
      lifetime_error              = 4
      lifetime_dynpro_dynpro_link = 5
      others                      = 6.

  if sy-subrc ne 0.
    add sy-subrc to cv_subrc.
    return.
  endif.

  create object  co_alv
    exporting
      i_parent                    = co_container-&gt;screen0
    exceptions
      error_cntl_create           = 1
      error_cntl_init             = 2
      error_cntl_link             = 3
      error_dp_create             = 4
      others                      = 5.

  if sy-subrc ne 0.
    add sy-subrc to cv_subrc.
    return.
  endif.

  co_alv-&gt;set_graphics_container( i_graphics_container = co_container ).

endform.                    &quot;alv_create

*&amp;--------------------------------------------------------------------*
*&amp;      Form  alv_destroy
*&amp;--------------------------------------------------------------------*
*       text
*---------------------------------------------------------------------*
*      --&gt;CO_ALV     text
*      --&gt;CO_CONTAINEtext
*      --&gt;CV_SUBRC   text
*---------------------------------------------------------------------*
form alv_destroy changing co_alv       type ref to cl_gui_alv_grid
                          co_container type ref to cl_gui_custom_container
                          cv_subrc     type sysubrc.

  clear cv_subrc.

  if co_alv is bound.

    co_alv-&gt;free( exceptions
                    cntl_error              = 1
                    cntl_system_error       = 2
                    others                  = 3 ).

    if sy-subrc ne 0.
      add sy-subrc to cv_subrc.
      return.
    endif.

    free: co_alv.

  endif.

  if co_container is bound.

    co_container-&gt;free( exceptions
                          cntl_error        = 1
                          cntl_system_error = 2
                          others            = 3 ).

    if sy-subrc ne 0.
      add sy-subrc to cv_subrc.
      return.
    endif.

    free: co_container.

  endif.

endform.                    &quot;alv_destroy

*&amp;--------------------------------------------------------------------*
*&amp;      Form  build_query_string
*&amp;--------------------------------------------------------------------*
*       text
*---------------------------------------------------------------------*
*      --&gt;VALUE(VT_TEtext
*      --&gt;CV_QUERY   text
*---------------------------------------------------------------------*
form build_query_string using value(vt_text) type soli_tab changing cv_query type string.

  clear: cv_query.

  data: ls_text type soli.

  loop at vt_text into ls_text-line where not line is initial or not line co &apos; &apos;.
    condense ls_text-line.
    concatenate cv_query ls_text-line into cv_query separated by space.
  endloop.

  condense cv_query.

endform.                    &quot;build_query_string

*&amp;--------------------------------------------------------------------*
*&amp;      Form  get_textarea_content
*&amp;--------------------------------------------------------------------*
*       text
*---------------------------------------------------------------------*
*      --&gt;VALUE(VO_TEtextEA)
*      --&gt;CT_TEXT    text
*      --&gt;CV_SUBRC   text
*---------------------------------------------------------------------*
form get_textarea_content using value(vo_textarea) type ref to cl_gui_textedit

                          changing ct_text         type soli_tab
                                   cv_subrc        type sysubrc.

  clear cv_subrc.

  refresh ct_text.

  call method vo_textarea-&gt;get_text_as_r3table
    importing
      table                  = ct_text
    exceptions
      error_dp               = 1
      error_cntl_call_method = 2
      error_dp_create        = 3
      potential_data_loss    = 4
      others                 = 5.

  cv_subrc = sy-subrc.

endform.                    &quot;get_textarea_content

*&amp;--------------------------------------------------------------------*
*&amp;      Form  create_textarea
*&amp;--------------------------------------------------------------------*
*       text
*---------------------------------------------------------------------*
*      --&gt;VALUE(VO_COtextNER)
*      --&gt;CO_TEXTAREAtext
*      --&gt;CV_SUBRC   text
*---------------------------------------------------------------------*
form create_textarea using value(vo_container) type ref to cl_gui_custom_container

                     changing co_textarea      type ref to cl_gui_textedit
                              cv_subrc         type sysubrc.

  clear cv_subrc.

  create object co_textarea
    exporting
       parent                     = vo_container
       wordwrap_mode              = cl_gui_textedit=&gt;wordwrap_at_fixed_position
       wordwrap_position          = &apos;115&apos;
       wordwrap_to_linebreak_mode = cl_gui_textedit=&gt;true
    exceptions
        others                    = 1.

  cv_subrc = sy-subrc.

endform.                    &quot;create_textarea

*&amp;--------------------------------------------------------------------*
*&amp;      Form  create_container
*&amp;--------------------------------------------------------------------*
*       text
*---------------------------------------------------------------------*
*      --&gt;CO_CONTAINEtext
*      --&gt;CV_SUBRC   text
*---------------------------------------------------------------------*
form create_container changing co_container type ref to cl_gui_custom_container cv_subrc type sysubrc.

  clear cv_subrc.

  create object co_container
      exporting
          container_name              = &apos;TEXTAREA_QUERY&apos;
      exceptions
          cntl_error                  = 1
          cntl_system_error           = 2
          create_error                = 3
          lifetime_error              = 4
          lifetime_dynpro_dynpro_link = 5.

  cv_subrc = sy-subrc.

endform.                    &quot;create_container

*&amp;--------------------------------------------------------------------*
*&amp;      Form  set_screen_layout
*&amp;--------------------------------------------------------------------*
*       text
*---------------------------------------------------------------------*
*      --&gt;VALUE(VV_TAtextUT)
*      --&gt;VALUE(VV_TAtextP)
*      --&gt;VALUE(VV_STtextNPUT)
*---------------------------------------------------------------------*
form set_screen_layout using value(vv_tabinput)   type i
                             value(vv_tabhelp)    type i
                             value(vv_startinput) type i.

  loop at screen.
    if screen-name eq &apos;GV_TABLE&apos;.
      screen-input      = vv_tabinput.
      screen-value_help = vv_tabhelp.
    endif.
    if screen-name eq &apos;BUTTON_START&apos;.
      screen-input      = vv_startinput.
    endif.
    modify screen.
  endloop.

endform.                    &quot;set_screen_layout

*&amp;--------------------------------------------------------------------*
*&amp;      Form  rfc_close
*&amp;--------------------------------------------------------------------*
*       text
*---------------------------------------------------------------------*
*      --&gt;VALUE(VV_RFtext
*---------------------------------------------------------------------*
form rfc_close using value(vv_rfc) type rfcdest.

  call function &apos;RFC_CONNECTION_CLOSE&apos;
    exporting
      destination          = vv_rfc
    exceptions
      destination_not_open = 0
      others               = 0.

endform.                    &quot;rfc_close

*&amp;--------------------------------------------------------------------*
*&amp;      Form  verify_destination
*&amp;--------------------------------------------------------------------*
*       text
*---------------------------------------------------------------------*
*      --&gt;VALUE(VV_RFtext
*      --&gt;CV_SUBRC   text
*---------------------------------------------------------------------*
form verify_destination using value(vv_rfc) type rfcdest changing cv_subrc type sysubrc.

  data: lv_rfc type string.

  clear cv_subrc.

  lv_rfc = vv_rfc.

  call function &apos;RFC_VERIFY_DESTINATION&apos;
    exporting
      destination                = lv_rfc
    exceptions
      internal_failure           = 1
      timeout                    = 2
      dest_communication_failure = 3
      dest_system_failure        = 4
      update_failure             = 5
      no_update_authority        = 6
      others                     = 7.

  cv_subrc = sy-subrc.

endform.                    &quot;verify_destination

*&amp;--------------------------------------------------------------------*
*&amp;      Form  set_textarea_readonly
*&amp;--------------------------------------------------------------------*
*       text
*---------------------------------------------------------------------*
*      --&gt;VALUE(VV_BOtext
*      --&gt;CO_TEXTAREAtext
*      --&gt;CV_SUBRC   text
*---------------------------------------------------------------------*
form set_textarea_readonly using value(vv_bool) type i

                           changing co_textarea type ref to cl_gui_textedit
                                    cv_subrc    type sysubrc.

  clear cv_subrc.

  call method co_textarea-&gt;set_readonly_mode
    exporting
      readonly_mode          = vv_bool
    exceptions
      error_cntl_call_method = 1
      invalid_parameter      = 2
      others                 = 3.

  cv_subrc = sy-subrc.

endform.                    &quot;set_textarea_readonly</source>
 </PROG>
 <PROG NAME="ZDYNSRQI01" VARCL="X" SUBC="I" RMAND="350" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Input" LENGTH="5 "/>
   </language>
  </textPool>
  <source>*---------------------------------------------------------------------*
*  MODULE after_input_9001 INPUT
*---------------------------------------------------------------------*
*
*---------------------------------------------------------------------*
module after_input_9001 input.

  case sy-ucomm.

    when &apos;BACK&apos; or &apos;CANCEL&apos; or &apos;EXIT&apos;.

      leave program.

    when &apos;START&apos;.

*     check rfc and tablle
      perform verify_destination using gv_rfc changing gv_subrc.

      if gv_subrc ne 0.
        message w050(zdyntypebuilder) with gv_rfc.
        return.
      endif.

      concatenate `TABNAME EQ &apos;` gv_table `&apos; AND AS4LOCAL EQ &apos;A&apos; AND AS4VERS EQ &apos;0000&apos;` into gv_query.

      _srq_build-structure gv_rfc &apos;DD02L&apos; go_table.

      if sy-subrc ne 0.
        message w055(zdyntypebuilder) with gv_table gv_rfc.
        return.
      endif.

      ##WRITE_OK
      _srq_select-single gv_rfc &apos;DD02L&apos; gv_query go_table.

      if sy-subrc ne 0.
        message w055(zdyntypebuilder) with gv_table gv_rfc.
        return.
      endif.

*     query mustn&apos;t be initial
      perform get_textarea_content using go_textarea changing gt_text gv_subrc.

      if gv_subrc ne 0 or gt_text is initial.
        message w056(zdyntypebuilder).
        return.
      endif.

*     build remote query
      perform build_query_string using gt_text changing gv_query.

      free: go_table.
      gv_struk = gv_table.

*     perform remote query
      _srq_build-itab gv_rfc gv_struk go_table.

      if sy-subrc ne 0.
        message w059(zdyntypebuilder).
        return.
      endif.

      ##WRITE_OK
      _srq_select gv_rfc gv_struk gv_query go_table.

      if sy-subrc ne 0.
        message s057(zdyntypebuilder).
        return.
      endif.

      assign go_table-&gt;* to &lt;gt_list&gt;.

*     build field catalog
      perform build_fieldcatalog using gv_rfc gv_struk changing gt_fcat gv_subrc.

      if sy-subrc ne 0.
        message s060(zdyntypebuilder).
        return.
      endif.

      set screen &apos;9002&apos;.

  endcase.

endmodule.                    &quot;after_input_9001 INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  after_input_9002  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
module after_input_9002 input.

  case sy-ucomm.

    when &apos;BACK&apos; or &apos;CANCEL&apos; or &apos;EXIT&apos;.

      perform alv_destroy changing go_alv go_cntresult gv_subrc.

      refresh &lt;gt_list&gt;.
      set screen &apos;9001&apos;.

  endcase.

endmodule.                 &quot; after_input_9002  INPUT</source>
 </PROG>
 <PROG NAME="ZDYNSRQO01" VARCL="X" SUBC="I" RMAND="350" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Output" LENGTH="6 "/>
   </language>
  </textPool>
  <source>*---------------------------------------------------------------------*
*  MODULE before_output_9001 OUTPUT
*---------------------------------------------------------------------*
*
*---------------------------------------------------------------------*
module before_output_9001 output.

  set pf-status &apos;GS_9001&apos;.

  if not go_container is bound.

    perform create_container changing go_container gv_subrc.

    if gv_subrc ne 0.
      message a054(zdyntypebuilder).
    endif.

  endif.

  if not go_textarea is bound.

    perform create_textarea using go_container changing go_textarea gv_subrc.

    if gv_subrc ne 0.
      message a053(zdyntypebuilder).
    endif.

  endif.

  if not gv_rfc is initial.

    perform verify_destination using gv_rfc changing gv_subrc.

    if gv_subrc ne 0.
      clear gv_rfc.
      message w050(zdyntypebuilder) with gv_rfc.
    endif.

  endif.

  if not gv_rfc is initial.

    perform set_textarea_readonly using cl_gui_textedit=&gt;false changing go_textarea gv_subrc.

    if gv_subrc ne 0.
      message a051(zdyntypebuilder).
    endif.

    perform set_screen_layout using cl_gui_textedit=&gt;true cl_gui_textedit=&gt;true cl_gui_textedit=&gt;true.

  else.

    perform set_textarea_readonly using cl_gui_textedit=&gt;true changing go_textarea gv_subrc.

    if gv_subrc ne 0.
      message a052(zdyntypebuilder).
    endif.

    perform set_screen_layout using cl_gui_textedit=&gt;false cl_gui_textedit=&gt;false cl_gui_textedit=&gt;false.

  endif.

  perform rfc_close using gv_rfc.

endmodule.                    &quot;before_output_9001 OUTPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  before_output_9002  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
module before_output_9002 output.

  set pf-status &apos;GS_9002&apos;.

  perform alv_destroy changing go_alv go_cntresult gv_subrc.

  if gv_subrc ne 0.
    message a058(zdyntypebuilder).
    return.
  endif.

  perform alv_create using &apos;CONTRESULT&apos; changing go_cntresult go_alv gv_subrc.

  if gv_subrc ne 0.
    message a058(zdyntypebuilder).
    return.
  endif.

  go_alv-&gt;set_table_for_first_display( exporting
                                       is_layout                      = gs_layout
                                     changing
                                       it_outtab                      = &lt;gt_list&gt;
                                       it_fieldcatalog                = gt_fcat
                                     exceptions
                                       invalid_parameter_combination  = 1
                                       program_error                  = 2
                                       too_many_lines                 = 3
                                       others                         = 4 ).

  if sy-subrc ne 0.
    message a058(zdyntypebuilder).
    leave to screen 0.
  endif.

endmodule.                 &quot; before_output_9002  OUTPUT</source>
 </PROG>
 <PROG NAME="ZDYNSRQTOP" VARCL="X" SUBC="I" RMAND="350" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Include ZDYNSRQTOP" LENGTH="18 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Include ZDYNSRQTOP                                        Report ZDYNSRQ
*&amp;
*&amp;---------------------------------------------------------------------*

report   zdynsrq.

##INCL_OK
include zsrq.

##NEEDED
data: go_textarea  type ref to cl_gui_textedit,
      go_container type ref to cl_gui_custom_container,
      go_table     type ref to data,
      go_alv       type ref to cl_gui_alv_grid,
      go_cntresult type ref to cl_gui_custom_container.

##NEEDED
data: gt_text   type soli_tab,
      gt_fcat   type lvc_t_fcat.

##NEEDED
data: gs_layout type lvc_s_layo.

##NEEDED
data: gv_rfc    type rfcdest,
      gv_table  type tabname16,
      gv_subrc  type sysubrc,
      gv_query  type string,
      gv_struk  type strukname.

##NEEDED
field-symbols: &lt;gt_list&gt; type standard table.</source>
 </PROG>
 <PROG NAME="ZDYNSRQ" VARCL="X" SUBC="1" RMAND="350" RLOAD="E" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Remote Query" LENGTH="12 "/>
   </language>
  </textPool>
  <dynpros>
   <dynpro PROG="ZDYNSRQ" DNUM="9001" FNUM="9001" BZMX="27 " BZBR="119 " MILI="196 " MICO="37 " MALI="0 " MACO="0 " NOLI="28 " NOCO="124 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Query Editor">
    <dynprofield FNAM="LABEL_RFC" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="11" LINE="02" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="RFC Destination" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GV_RFC" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="08" LENG="20" LINE="02" COLN="15" LANF="00" LBLK="00" LREP="00" PAID="RFC" TYPE="CHAR" DMAC="F4_RFCDES3" ITYP="C" AGLT="00" ADEZ="00" STXT="________________________________"/>
    <dynprofield FNAM="LABEL_TABLE" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="08" LINE="02" COLN="3A" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="Table" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GV_TABLE" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="08" LENG="10" LINE="02" COLN="43" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" DMAC="ZSRQTABLIST" ITYP="C" AGLT="00" ADEZ="00" STXT="________________"/>
    <dynprofield FNAM="BUTTON_START" DIDX="000A" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="0C" LINE="02" COLN="58" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="@0V@_Start__" RES1="                                                                                                                                                                        START"/>
    <dynprofield FNAM="TEXTAREA_QUERY" DIDX="0018" FLG1="00" FLG2="00" FLG3="00" FILL="U" FMB1="30" FMB2="00" LENG="76" LINE="04" COLN="03" LANF="00" LBLK="00" LREP="00" AUTH="102" AGLT="01" ADEZ="01"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>process before output.
  module before_output_9001.

process after input.
  module after_input_9001.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZDYNSRQ" DNUM="9002" FNUM="9002" BZMX="0 " BZBR="0 " MILI="196 " MICO="37 " MALI="0 " MACO="0 " NOLI="27 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Result">
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>process before output.
  module before_output_9002.

process after input.
  module after_input_9002.</dynproflowsource>
   </dynpro>
  </dynpros>
  <pfstatus>
   <pfstatus_sta CODE="GS_9001" MODAL="D" ACTCODE="000001" PFKCODE="000001" BUTCODE="0001" INT_NOTE="GUI Status Screen 9001"/>
   <pfstatus_sta CODE="GS_9002" MODAL="D" ACTCODE="000001" PFKCODE="000001" BUTCODE="0001" INT_NOTE="GUI Status Screen 9001"/>
   <pfstatus_fun CODE="BACK" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Back"/>
   <pfstatus_fun CODE="CANCEL" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Exit"/>
   <pfstatus_fun CODE="ENTER" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="ENTER"/>
   <pfstatus_fun CODE="EXIT" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CANCEL" ICON_ID="@0W@" FUN_TEXT="Cancel"/>
   <pfstatus_pfk CODE="000001" PFNO="03" FUNCODE="BACK" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="12" FUNCODE="EXIT" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="15" FUNCODE="CANCEL" FUNNO="001"/>
   <pfstatus_set STATUS="GS_9001" FUNCTION="BACK"/>
   <pfstatus_set STATUS="GS_9001" FUNCTION="CANCEL"/>
   <pfstatus_set STATUS="GS_9001" FUNCTION="ENTER"/>
   <pfstatus_set STATUS="GS_9001" FUNCTION="EXIT"/>
   <pfstatus_set STATUS="GS_9002" FUNCTION="BACK"/>
   <pfstatus_set STATUS="GS_9002" FUNCTION="CANCEL"/>
   <pfstatus_set STATUS="GS_9002" FUNCTION="ENTER"/>
   <pfstatus_set STATUS="GS_9002" FUNCTION="EXIT"/>
   <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000001" MODAL="D" INT_NOTE="GUI Status Screen 9001"/>
   <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000001" MODAL="D" INT_NOTE="GUI Status Screen 9001"/>
   <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000001" SUB_CODE="0001" INT_NOTE="GUI Status Screen 9001"/>
  </pfstatus>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZDYNSRQ
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*

include zdynsrqtop.

initialization.

  gs_layout-zebra      = &apos;X&apos;.
  gs_layout-sel_mode   = &apos;D&apos;.
  gs_layout-cwidth_opt = &apos;X&apos;.

start-of-selection.

  call screen 9001.

  include zdynsrqf01.

  include zdynsrqi01.

  include zdynsrqo01.</source>
 </PROG>
 <PROG NAME="ZDYNSTRUCTBUILDERDEMO" VARCL="X" SUBC="1" RMAND="700" RLOAD="E" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="I" KEY="002" ENTRY="PROFILES OF" LENGTH="132 "/>
    <textElement ID="I" KEY="003" ENTRY="------------------------------------------------------------------------------------------------------------------------------------" LENGTH="132 "/>
    <textElement ID="I" KEY="005" ENTRY="Unexpected Error" LENGTH="132 "/>
    <textElement ID="I" KEY="006" ENTRY="ALV Grid Generation Failed" LENGTH="132 "/>
    <textElement ID="R" ENTRY="Demo Dynamic Remote Structure Builder" LENGTH="37 "/>
    <textElement ID="S" KEY="P_ALV" ENTRY="        Show as ALV Grid" LENGTH="24 "/>
    <textElement ID="S" KEY="P_DEST" ENTRY="D       RFC Destination" LENGTH="23 "/>
    <textElement ID="S" KEY="P_UNAME" ENTRY="D       User" LENGTH="12 "/>
   </language>
   <language SPRAS="I">
    <textElement ID="I" KEY="002" ENTRY="PROFILI DI" LENGTH="132 "/>
    <textElement ID="I" KEY="003" ENTRY="------------------------------------------------------------------------------------------------------------------------------------" LENGTH="132 "/>
    <textElement ID="I" KEY="005" ENTRY="Errore Inatteso" LENGTH="132 "/>
    <textElement ID="I" KEY="006" ENTRY="Generazione ALV Grid Fallita" LENGTH="132 "/>
    <textElement ID="R" ENTRY="DEMO Generatore Strutture Dinamiche Remote" LENGTH="42 "/>
    <textElement ID="S" KEY="P_ALV" ENTRY="        Mostra come ALV Grid" LENGTH="28 "/>
    <textElement ID="S" KEY="P_DEST" ENTRY="D       Destinazione RFC" LENGTH="24 "/>
    <textElement ID="S" KEY="P_UNAME" ENTRY="D       Utenza" LENGTH="14 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZDYNSTRUCTBUILDERDEMO
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*

report  zdynstructbuilderdemo.

parameters: p_uname type xubname,
            p_dest  type rfcdest obligatory,
            p_alv   type xfeld as checkbox.

start-of-selection.

  type-pools: slis.

  ##NEEDED
  constants: gc_30 type i value 30.

* declare field symbols of type any or standard table
  ##NEEDED
  field-symbols: &lt;fs_ts_address&gt; type any,
                 &lt;fs_tt_profile&gt; type standard table,
                 &lt;fs_tt_return&gt;  type standard table.

* declare line field symbols fore managing data
  ##NEEDED
  field-symbols: &lt;fs_line&gt;       type any,
                 &lt;fs_any&gt;        type any.

* declare structure and type table descriptor
  ##NEEDED
  data: lo_address_ts type ref to cl_abap_structdescr,
        lo_profile_tt type ref to cl_abap_tabledescr,
        lo_return_tt  type ref to cl_abap_tabledescr.

* declare generic data type ref
  ##NEEDED
  data: lo_address_wa type ref to data,
        lo_profile_it type ref to data,
        lo_return_it  type ref to data.

* declare for getting components when parsing result
  ##NEEDED
  data: lt_comp type abap_component_tab,
        ls_comp type abap_componentdescr.

* for output writing
  ##NEEDED
  data: lv_text type string.

* for alv grid
  ##NEEDED
  data: lt_fcat   type slis_t_fieldcat_alv,
        ls_fcat   type slis_fieldcat_alv,
        ls_layout type slis_layout_alv.

* create dynamic builders for each structure
  try.

      lo_address_ts = zcl_dyn_remote_type_builder=&gt;create_struct_type( i_rfcdest = p_dest i_struct = &apos;BAPIADDR3&apos; ).
      lo_profile_tt = zcl_dyn_remote_type_builder=&gt;create_table_type( i_rfcdest = p_dest i_struct = &apos;BAPIPROF&apos; ).
      lo_return_tt  = zcl_dyn_remote_type_builder=&gt;create_table_type( i_rfcdest = p_dest i_struct = &apos;BAPIRET2&apos; ).

    catch cx_parameter_invalid_range cx_sy_struct_creation .

      message text-005 type &apos;E&apos;.

  endtry.


* create generic data objects handling desired type descriptor
  create data: lo_address_wa type handle lo_address_ts,
               lo_profile_it type handle lo_profile_tt,
               lo_return_it  type handle lo_return_tt.

* assign derefrenciated objects to a generic field-symbol
  assign: lo_address_wa-&gt;* to &lt;fs_ts_address&gt;,
          lo_profile_it-&gt;* to &lt;fs_tt_profile&gt;,
          lo_return_it-&gt;*  to &lt;fs_tt_return&gt;.

* call remote module
  call function &apos;BAPI_USER_GET_DETAIL&apos; destination p_dest
    exporting
      username              = p_uname
    importing
      address               = &lt;fs_ts_address&gt;
    tables
      profiles              = &lt;fs_tt_profile&gt;
      return                = &lt;fs_tt_return&gt;
    exceptions
      communication_failure = 0
      system_failure        = 0
      others                = 0.

  if &lt;fs_tt_return&gt; is initial.

*   get profile table components
    lt_comp = zcl_dyn_remote_type_builder=&gt;get_components( i_rfcdest = p_dest i_struct = &apos;BAPIPROF&apos; ).

    try.

        if p_alv is initial.

*         write fullname
          assign component &apos;FULLNAME&apos; of structure &lt;fs_ts_address&gt; to &lt;fs_any&gt;.
          concatenate text-002 &lt;fs_any&gt; into lv_text separated by space.
          write: / lv_text.
          write: / text-003.

          clear: lv_text.

          loop at &lt;fs_tt_profile&gt; assigning &lt;fs_line&gt;.
            loop at lt_comp into ls_comp.
              assign component ls_comp-name of structure &lt;fs_line&gt; to &lt;fs_any&gt;.
              write: / ls_comp-name.
              write: at gc_30 &apos;:&apos;, &lt;fs_any&gt;.
              clear: ls_comp, lv_text.
            endloop.
            write: / text-003.
            clear: lv_text.
          endloop.

        else.

*         build field catalog
          loop at lt_comp into ls_comp.
            ls_fcat-col_pos   = sy-tabix.
            ls_fcat-fieldname = ls_comp-name.
            ls_fcat-seltext_s = ls_comp-name.
            ls_fcat-ddictxt   = &apos;S&apos;.
            append ls_fcat to lt_fcat.
            clear: ls_comp, ls_fcat.
          endloop.

*         optimize column width
          ls_layout-colwidth_optimize = &apos;X&apos;.

*         show alv
          call function &apos;REUSE_ALV_GRID_DISPLAY&apos;
            exporting
              is_layout     = ls_layout
              it_fieldcat   = lt_fcat
            tables
              t_outtab      = &lt;fs_tt_profile&gt;
            exceptions
              program_error = 1
              others        = 2.

          if sy-subrc ne 0.
            message text-006 type &apos;E&apos;.
          endif.

        endif.

      catch cx_parameter_invalid_range zcx_dyn_remote_type_builder.

        message text-005 type &apos;E&apos;.

    endtry.


  else.

    loop at &lt;fs_tt_return&gt; assigning &lt;fs_line&gt;.
      assign component &apos;MESSAGE&apos; of structure &lt;fs_line&gt; to &lt;fs_any&gt;.
      write: / &lt;fs_any&gt;.
    endloop.

  endif.</source>
 </PROG>
 <PROG NAME="ZDYNSRQDEMO" VARCL="X" SUBC="1" RMAND="410" RLOAD="E" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="I" KEY="001" ENTRY="STATIC CORRESPONDING-FIELDS MAPPING OUTPUT" LENGTH="132 "/>
    <textElement ID="I" KEY="002" ENTRY="DYNAMIC FIELD MAPPING OUTPUT" LENGTH="132 "/>
    <textElement ID="I" KEY="003" ENTRY="invalid option specified (no intervals!)" LENGTH="132 "/>
    <textElement ID="I" KEY="004" ENTRY="destination rfc must be specified" LENGTH="132 "/>
    <textElement ID="I" KEY="005" ENTRY="nothing found" LENGTH="132 "/>
    <textElement ID="R" ENTRY="Simple Remote Query Demo" LENGTH="24 "/>
    <textElement ID="S" KEY="P_ADR" ENTRY="D       Address number" LENGTH="22 "/>
    <textElement ID="S" KEY="P_MULTI" ENTRY="        Remote Select" LENGTH="21 "/>
    <textElement ID="S" KEY="P_RFC" ENTRY="D       RFC Destination" LENGTH="23 "/>
    <textElement ID="S" KEY="P_SINGLE" ENTRY="        Remote Select Single" LENGTH="28 "/>
    <textElement ID="S" KEY="SO_ADR" ENTRY="D       Address number" LENGTH="22 "/>
   </language>
   <language SPRAS="I">
    <textElement ID="I" KEY="001" ENTRY="OUTPUT CON MAPPAGGIO STATICO CAMPI CORRISPONDENTI" LENGTH="132 "/>
    <textElement ID="I" KEY="002" ENTRY="OUTPUT CON MAPPAGGIO DINAMICO CAMPI" LENGTH="132 "/>
    <textElement ID="I" KEY="003" ENTRY="opzione specificata non valida (solo valori singoli, non intervalli!)" LENGTH="132 "/>
    <textElement ID="I" KEY="004" ENTRY="la destinazione remota deve essere specificata" LENGTH="132 "/>
    <textElement ID="I" KEY="005" ENTRY="nessun record trovato" LENGTH="132 "/>
    <textElement ID="I" KEY="006" ENTRY="record trovati:" LENGTH="132 "/>
    <textElement ID="R" ENTRY="Simple Remote Query Demo" LENGTH="24 "/>
    <textElement ID="S" KEY="P_ADR" ENTRY="D       Numero indirizzo" LENGTH="24 "/>
    <textElement ID="S" KEY="P_MULTI" ENTRY="        Select Remota" LENGTH="21 "/>
    <textElement ID="S" KEY="P_RFC" ENTRY="D       Destinazione RFC" LENGTH="24 "/>
    <textElement ID="S" KEY="P_SINGLE" ENTRY="        Select Single Remota" LENGTH="28 "/>
    <textElement ID="S" KEY="SO_ADR" ENTRY="D       Numero indirizzo" LENGTH="24 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZDYNSRQDEMO
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*

include zdynsrqdemotop.

parameters: p_rfc type rfcdest obligatory.

parameters: p_single type xfeld radiobutton group gr1 user-command ucom,
            p_multi  type xfeld radiobutton group gr1 default &apos;X&apos;.

parameters: p_adr type ad_addrnum modif id sin.
select-options: so_adr for gs_subadrc-addrnumber no intervals modif id mul.

at selection-screen output.

  loop at screen.
    if screen-group1 eq &apos;SIN&apos; and p_single eq &apos;X&apos;.
      refresh so_adr[].
      screen-input = &apos;1&apos;.
    elseif screen-group1 eq &apos;SIN&apos;.
      screen-input = &apos;0&apos;.
    endif.
    if screen-group1 eq &apos;MUL&apos; and p_multi eq &apos;X&apos;.
      clear p_adr.
      screen-input = &apos;1&apos;.
    elseif screen-group1 eq &apos;MUL&apos;.
      screen-input = &apos;0&apos;.
    endif.
    modify screen.
  endloop.

start-of-selection.

* check rfc specified
  if p_rfc is initial.
    message text-004 type &apos;E&apos;.
  endif.

*****************
* REMOTE SELECT *
*****************
  if p_multi eq &apos;X&apos;.

*   prepare queries
    loop at so_adr into gs_soadr where sign eq &apos;I&apos; and option eq &apos;EQ&apos;.
      if sy-tabix eq lines( so_adr[] ).
        concatenate gv_adrc_query `( ADDRNUMBER EQ &apos;` gs_soadr-low `&apos; AND DATE_FROM LE &apos;` sy-datum `&apos; AND DATE_TO GE &apos;` sy-datum `&apos; )` into gv_adrc_query.
        concatenate gv_adr2_query `( ADDRNUMBER EQ &apos;` gs_soadr-low `&apos; )` into gv_adr2_query.
      else.
        concatenate gv_adrc_query `( ADDRNUMBER EQ &apos;` gs_soadr-low `&apos; AND DATE_FROM LE &apos;` sy-datum `&apos; AND DATE_TO GE &apos;` sy-datum `&apos; ) OR ` into gv_adrc_query.
        concatenate gv_adr2_query `( ADDRNUMBER EQ &apos;` gs_soadr-low `&apos; ) OR ` into gv_adr2_query.
      endif.
    endloop.

*   input check
    if gv_adrc_query is initial.
      write: / text-003.
    endif.

*   dynamically build internal table data for result
    _srq_build-itab p_rfc: &apos;ADRC&apos; go_adrc_itab, &apos;ADR2&apos; go_adr2_itab.

*   perform query on backend
    _srq_select p_rfc: &apos;ADRC&apos; gv_adrc_query go_adrc_itab, &apos;ADR2&apos; gv_adr2_query go_adr2_itab.

*   for a friendly management of data
    assign: go_adrc_itab-&gt;* to &lt;gt_adrc&gt;, go_adr2_itab-&gt;* to &lt;gt_adr2&gt;.

*   static corresponding field-map
    write at: /1(1023) text-001 color col_heading intensified on.
    loop at &lt;gt_adrc&gt; assigning &lt;gs_line&gt;.
      _srq_move-corresponding &lt;gs_line&gt; gs_subadrc.
      _srq_move-mapping &lt;gs_line&gt; gs_subadrc: &apos;NAME1&apos; &apos;NAME&apos;, &apos;HOUSE_NUM1&apos; &apos;HOUSE_NO&apos;, &apos;CITY1&apos; &apos;CITY&apos;.
      write: / gs_subadrc-addrnumber, &apos;|&apos;, gs_subadrc-name, &apos;|&apos;, gs_subadrc-street, &apos;|&apos;, gs_subadrc-city, &apos;|&apos;, gs_subadrc-region, &apos;|&apos;, gs_subadrc-country.
      clear: gs_subadrc.
    endloop.

*   dynamic field get
    write at: /1(1023) text-002 color col_heading intensified on.
    loop at &lt;gt_adr2&gt; assigning &lt;gs_line&gt;.
      _srq_get-field &lt;gs_line&gt;: &apos;ADDRNUMBER&apos; gv_adrno, &apos;PERSNUMBER&apos; gv_perno, &apos;TEL_NUMBER&apos; gv_telno.
      write: / gv_adrno, &apos;|&apos;, gv_perno, &apos;|&apos;, gv_telno.
    endloop.

  endif.

************************
* REMOTE SELECT SINGLE *
************************
  if p_single eq &apos;X&apos;.

*   prepare query
    concatenate `ADDRNUMBER EQ &apos;` p_adr `&apos; AND DATE_FROM LE &apos;` sy-datum `&apos; AND DATE_TO GE &apos;` sy-datum `&apos;` into gv_adrc_query.

*   dynamically build structure data for result
    _srq_build-structure p_rfc &apos;ADRC&apos; go_adrc_struc.

*   perform query on backend
    _srq_select-single p_rfc &apos;ADRC&apos; gv_adrc_query go_adrc_struc.

    if sy-subrc ne 0. write: / text-005. endif.

*   for a friendly management of data
    assign go_adrc_struc-&gt;* to &lt;gs_line&gt;.

*   static corresponding field-map
    write at: /1(1023) text-001 color col_heading intensified on.
    _srq_move-corresponding &lt;gs_line&gt; gs_subadrc.
    _srq_move-mapping &lt;gs_line&gt; gs_subadrc: &apos;NAME1&apos; &apos;NAME&apos;, &apos;HOUSE_NUM1&apos; &apos;HOUSE_NO&apos;, &apos;CITY1&apos; &apos;CITY&apos;.
    write: / gs_subadrc-addrnumber, &apos;|&apos;, gs_subadrc-name, &apos;|&apos;, gs_subadrc-street, &apos;|&apos;, gs_subadrc-city, &apos;|&apos;, gs_subadrc-region, &apos;|&apos;, gs_subadrc-country.

*   dynamic field get
    write at: /1(1023) text-002 color col_heading intensified on.
    _srq_get-field &lt;gs_line&gt; : &apos;ADDRNUMBER&apos; gs_subadrc-addrnumber, &apos;NAME1&apos; gs_subadrc-name, &apos;STREET&apos; gs_subadrc-street, &apos;CITY1&apos; gs_subadrc-city, &apos;REGION&apos; gs_subadrc-region, &apos;COUNTRY&apos; gs_subadrc-country.
    write: / gs_subadrc-addrnumber, &apos;|&apos;, gs_subadrc-name, &apos;|&apos;, gs_subadrc-street, &apos;|&apos;, gs_subadrc-city, &apos;|&apos;, gs_subadrc-region, &apos;|&apos;, gs_subadrc-country.

  endif.</source>
 </PROG>
 <PROG NAME="ZDYNSRQDEMOTOP" VARCL="X" SUBC="I" RMAND="410" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Include ZDYNSRQDEMOTOP" LENGTH="22 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Include ZDYNSRQDEMOTOP                                    Report ZDYNSRQDEMO
*&amp;
*&amp;---------------------------------------------------------------------*

report zdynsrqdemo line-size 1023.

* simple remote query macros
##INCL_OK
include: zsrq.

* subfield selection of ADRC structure
##NEEDED
types: begin of ts_subadrc,
         addrnumber type ad_addrnum,
         date_from  type ad_date_fr,
         nation     type ad_nation,
         name       type ad_name1,
         street     type ad_street,
         house_no   type ad_hsnm1,
         city       type ad_city1,
         region     type regio,
         country    type land1,
       end of ts_subadrc,

       begin of ts_so_adr,
         sign   type tvarv_sign,
         option type tvarv_opti,
         low    type ad_addrnum,
         high   type ad_addrnum,
       end of ts_so_adr.

* global data
##NEEDED
data: gs_soadr      type ts_so_adr,
      gv_adrc_query type string,
      gv_adr2_query type string,
      gs_subadrc    type ts_subadrc,
      gv_adrno      type ad_addrnum,
      gv_perno      type ad_persnum,
      gv_telno      type ad_tlnmbr.

* global field-symbols
##NEEDED
field-symbols: &lt;gt_adr2&gt;  type standard table,
               &lt;gt_adrc&gt;  type standard table,
               &lt;gs_line&gt;  type any.

* global objects
##NEEDED
data: go_adrc_itab  type ref to data,
      go_adr2_itab  type ref to data,
      go_adrc_struc type ref to data.</source>
 </PROG>
 <PROG NAME="ZSRQ" VARCL="X" SUBC="I" RMAND="410" RLOAD="E" UCCHECK="X">
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZSRQ
*&amp;---------------------------------------------------------------------*

*************************************
* See ZDYNSRQDEMO report for a demo *
*************************************

* globals
##NEEDED
data: _lv_count  type i,
      _ls_comp1  type cl_abap_structdescr=&gt;component,
      _ls_comp2  type cl_abap_structdescr=&gt;component,
      _lt_query  type zrfc_db_opt_t,
      _lt_comp1  type cl_abap_structdescr=&gt;component_table,
      _lt_comp2  type cl_abap_structdescr=&gt;component_table.

##NEEDED
data: _lo_struc1 type ref to cl_abap_structdescr,
      _lo_struc2 type ref to cl_abap_structdescr.

##NEEDED
field-symbols: &lt;_fs_field1&gt; type any,
               &lt;_fs_field2&gt; type any,
               &lt;_fs_struc&gt;  type any,
               &lt;_ft_itab&gt;   type standard table.

##NEEDED
define _srq_build-structure.

* &amp;1: rfc destination
* &amp;2: structure name
* &amp;3: result (structure data)

* sy-subrc set to 8 if error occurred

  try.

*     build internal table data
      call method zcl_dyn_remote_type_builder=&gt;build_data
        exporting
          i_rfcdest   = &amp;1
          i_struct    = &amp;2
        importing
          e_strucdata = &amp;3.

      if not &amp;3 is bound.
        ##WRITE_OK
        sy-subrc = 8.
      else.
        ##WRITE_OK
        sy-subrc = 0.
      endif.

    catch zcx_dyn_remote_type_builder.

      sy-subrc = 8.

  endtry.

end-of-definition.

##NEEDED
define _srq_build-itab.

* &amp;1: rfc destination
* &amp;2: structure name
* &amp;3: result (internal table data)

* sy-subrc set to 8 if error occurred

  try.

*     build internal table data
      call method zcl_dyn_remote_type_builder=&gt;build_data
        exporting
          i_rfcdest   = &amp;1
          i_struct    = &amp;2
        importing
          e_tabledata = &amp;3.

      if not &amp;3 is bound.
        ##WRITE_OK
        sy-subrc = 8.
      else.
        ##WRITE_OK
        sy-subrc = 0.
      endif.

    catch zcx_dyn_remote_type_builder.

      sy-subrc = 8.

  endtry.

end-of-definition.

##NEEDED
define _srq_select-single.

* &amp;1: rfc destination
* &amp;2: table name
* &amp;3: query as string
* &amp;4: result (structure data)

* sy-subrc set to 4 if nothing is found
* sy-subrc set to 8 if error occured
* sy-dbcnt set to 1

* clear globals
  refresh: _lt_query.

  if &lt;_fs_struc&gt; is assigned.
    unassign &lt;_fs_struc&gt;.
  endif.

  try.

*     encode queries
      _lt_query = zcl_dyn_remote=&gt;build_query( i_query = &amp;3 ).

      assign &amp;4-&gt;* to &lt;_fs_struc&gt;.

      if not &lt;_fs_struc&gt; is assigned.
        ##WRITE_OK
        sy-subrc = 8.
      else.

*       get data
        call method zcl_dyn_remote=&gt;get_remote_struc_data
          exporting
            i_rfc_destination = &amp;1
            i_table           = &amp;2
            i_query           = _lt_query
          importing
            e_struc           = &lt;_fs_struc&gt;.

        if not &lt;_fs_struc&gt; is initial.
          ##WRITE_OK
          sy-subrc = 0.
          ##WRITE_OK
          sy-dbcnt = 1.
        else.
          ##WRITE_OK
          sy-subrc = 4.
        endif.

      endif.

    catch zcx_dyn_remote_type_builder
          zcx_dyn_remote
          cx_parameter_invalid_range
          cx_sy_assign_cast_illegal_cast
          cx_sy_assign_cast_unknown_type
          cx_sy_assign_out_of_range.

      ##WRITE_OK
      sy-subrc = 8.

  endtry.

end-of-definition.

##NEEDED
define _srq_select.

* &amp;1: rfc destination
* &amp;2: table name
* &amp;3: query as string
* &amp;4: result (internal table data)

* sy-subrc set to 4 if nothing is found
* sy-subrc set to 8 if error occured
* sy-dbcnt set to record(s) found

* clear globals
  refresh: _lt_query.

  if &lt;_ft_itab&gt; is assigned.
    unassign &lt;_ft_itab&gt;.
  endif.

  try.

*     encode queries
      _lt_query = zcl_dyn_remote=&gt;build_query( i_query = &amp;3 ).

      assign &amp;4-&gt;* to &lt;_ft_itab&gt;.

      if not &lt;_ft_itab&gt; is assigned.
        ##WRITE_OK
        sy-subrc = 8.
      else.

*       get data
        call method zcl_dyn_remote=&gt;get_remote_table_data
          exporting
            i_rfc_destination = &amp;1
            i_table           = &amp;2
            i_query           = _lt_query
          importing
            e_table           = &lt;_ft_itab&gt;.

        if not &lt;_ft_itab&gt; is initial.
          ##WRITE_OK
          sy-subrc = 0.
          ##WRITE_OK
          sy-dbcnt = lines( &lt;_ft_itab&gt; ).
        else.
          ##WRITE_OK
          sy-subrc = 4.
        endif.

      endif.

    catch zcx_dyn_remote_type_builder
          zcx_dyn_remote
          cx_parameter_invalid_range
          cx_sy_assign_cast_illegal_cast
          cx_sy_assign_cast_unknown_type
          cx_sy_assign_out_of_range.

      ##WRITE_OK
      sy-subrc = 8.

  endtry.

end-of-definition.

##NEEDED
define _srq_get-field.

* &amp;1: structure
* &amp;2: field name
* &amp;3: field value

* sy-subrc set to 8 if error occurred

  try.

*     get field
      call method zcl_dyn_remote=&gt;get_field_value
        exporting
          i_fieldname  = &amp;2
          i_structure  = &amp;1
        importing
          e_fieldvalue = &amp;3.

    catch zcx_dyn_remote.

      ##WRITE_OK
      sy-subrc = 8.

  endtry.

  sy-subrc = 0.

end-of-definition.

##NEEDED
define _srq_set-field.

* &amp;1: structure
* &amp;2: field name
* &amp;3: field value

* sy-subrc set to 8 if error occurred

  try.

*     set field
      call method zcl_dyn_remote=&gt;set_field_value
        exporting
          i_fieldname  = &amp;2
          i_fieldvalue = &amp;3
        changing
          c_structure  = &amp;1.

    catch zcx_dyn_remote.

      ##WRITE_OK
      sy-subrc = 8.

  endtry.

  sy-subrc = 0.

end-of-definition.

##NEEDED
define _srq_move-corresponding.

* &amp;1: structure from
* &amp;2: structure to

* sy-subrc set to 8 if error occurred
* sy-dbcnt set to number of corresponding fields moved

* clear globals
  refresh: _lt_comp1, _lt_comp2.
  clear: _lv_count.
  free: _lo_struc1, _lo_struc2.

* describe local structure
  _lo_struc1 ?= cl_abap_structdescr=&gt;describe_by_data( &amp;1 ).
  _lo_struc2 ?= cl_abap_structdescr=&gt;describe_by_data( &amp;2 ).

* get local structure components
  _lt_comp1 = _lo_struc1-&gt;get_components( ).
  _lt_comp2 = _lo_struc2-&gt;get_components( ).

  try.

*     map components
      loop at _lt_comp1 into _ls_comp1.

        if &lt;_fs_field1&gt; is assigned.
          unassign &lt;_fs_field1&gt;.
        endif.

        if &lt;_fs_field2&gt; is assigned.
          unassign &lt;_fs_field2&gt;.
        endif.

        read table _lt_comp2 into _ls_comp2 with key name = _ls_comp1-name.

        if sy-subrc ne 0.
          continue.
        endif.

        assign component: _ls_comp1-name of structure &amp;1 to &lt;_fs_field1&gt;,
                          _ls_comp2-name of structure &amp;2 to &lt;_fs_field2&gt;.

        if &lt;_fs_field2&gt; is assigned and &lt;_fs_field1&gt; is assigned.
          &lt;_fs_field2&gt; = &lt;_fs_field1&gt;.
          add 1 to _lv_count.
        else.
          ##WRITE_OK
          sy-subrc = 8.
          exit.
        endif.

      endloop.

      ##WRITE_OK
      sy-subrc = 0.
      ##WRITE_OK
      sy-dbcnt = _lv_count.

    catch cx_sy_assign_cast_illegal_cast
          cx_sy_assign_cast_unknown_type
          cx_sy_assign_out_of_range.

      ##WRITE_OK
      sy-subrc = 8.

  endtry.

end-of-definition.

##NEEDED
define _srq_move-mapping.

* &amp;1: structure from
* &amp;2: structure to

* sy-subrc set to 8 if error occurred

* clear globals

  try.

      if &lt;_fs_field1&gt; is assigned.
        unassign &lt;_fs_field1&gt;.
      endif.

      if &lt;_fs_field2&gt; is assigned.
        unassign &lt;_fs_field2&gt;.
      endif.

      assign component: &amp;3 of structure &amp;1 to &lt;_fs_field1&gt;,
                        &amp;4 of structure &amp;2 to &lt;_fs_field2&gt;.

      if &lt;_fs_field2&gt; is assigned and &lt;_fs_field1&gt; is assigned.
        &lt;_fs_field2&gt; = &lt;_fs_field1&gt;.
        ##WRITE_OK
        sy-subrc = 0.
      else.
        ##WRITE_OK
        sy-subrc = 8.
      endif.

    catch cx_sy_assign_cast_illegal_cast
          cx_sy_assign_cast_unknown_type
          cx_sy_assign_out_of_range.

      ##WRITE_OK
      sy-subrc = 8.

  endtry.

end-of-definition.</source>
 </PROG>
 <SHLP SHLPNAME="ZSRQTABLIST" DDLANGUAGE="E" DDTEXT="Remote Table List" ISSIMPLE="X" SELMTYPE="F" SELMEXIT="ZSRQF4TABLES" DIALOGTYPE="D" FUZZY_SIMILARITY="0.0 ">
  <dd32p SHLPNAME="ZSRQTABLIST" FIELDNAME="TABNAME" FLPOSITION="0001" ROLLNAME="TABNAME16" SHLPINPUT="X" SHLPOUTPUT="X" SHLPSELPOS="01" SHLPLISPOS="01" ROLLCHANGE="N" DOMNAME="DBOBJ_NAME" HEADLEN="10" SCRLEN1="10" SCRLEN2="18" SCRLEN3="18" DATATYPE="CHAR" LENG="000016" OUTPUTLEN="000016" DECIMALS="000000"/>
  <dd32p SHLPNAME="ZSRQTABLIST" FIELDNAME="DDTEXT" FLPOSITION="0002" ROLLNAME="AS4TEXT" SHLPINPUT="X" SHLPSELPOS="02" SHLPLISPOS="02" ROLLCHANGE="N" DOMNAME="AS4TEXT" HEADLEN="20" SCRLEN1="10" SCRLEN2="18" SCRLEN3="18" DATATYPE="CHAR" LENG="000060" OUTPUTLEN="000060" DECIMALS="000000" LOWERCASE="X"/>
 </SHLP>
 <TABL TABNAME="ZCS_ABAP_STRUCTDESCR" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Structure Descriptor Structure" AUTHCLASS="00" PROZPUFF="000" EXCLASS="1">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZCS_ABAP_STRUCTDESCR" FIELDNAME="NAME" DDLANGUAGE="E" POSITION="0001" ROLLNAME="STRUKNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" DOMNAME="AS4TAB" ROUTPUTLEN="000000" MEMORYID="DTB" HEADLEN="10" SCRLEN1="10" SCRLEN2="18" SCRLEN3="18" DTELMASTER="D" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" ENTITYTAB="DD02L" MASK="  CHARE" MASKLEN="0000" DDTEXT="Name of a structure" REPTEXT="Structure" SCRTEXT_S="Structure" SCRTEXT_M="Structure" SCRTEXT_L="Structure name" DOMNAME3L="AS4TAB" DEPTH="00" COMPTYPE="E" DEFFDNAME="TABNAME" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZCS_ABAP_STRUCTDESCR" FIELDNAME="DESCRIPTOR" DDLANGUAGE="E" POSITION="0002" ROLLNAME="CL_ABAP_STRUCTDESCR" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="REF" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  REF RC" MASKLEN="0000" DDTEXT="Runtime Type Services" DEPTH="00" COMPTYPE="R" REFTYPE="C" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZCS_ABAP_ELEMDESCR" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Element Descriptor Structure" AUTHCLASS="00" PROZPUFF="000" EXCLASS="1">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZCS_ABAP_ELEMDESCR" FIELDNAME="NAME" DDLANGUAGE="E" POSITION="0001" ROLLNAME="ROLLNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" DOMNAME="ROLLNAME" ROUTPUTLEN="000000" MEMORYID="ROL" HEADLEN="12" SCRLEN1="10" SCRLEN2="18" SCRLEN3="18" DTELMASTER="D" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" ENTITYTAB="DD04L" MASK="  CHARE" MASKLEN="0000" DDTEXT="Data element (semantic domain)" REPTEXT="Data element" SCRTEXT_S="Data elem." SCRTEXT_M="Data element" SCRTEXT_L="Data element" DOMNAME3L="ROLLNAME" SHLPORIGIN="D" SHLPNAME="DD_DTEL" SHLPFIELD="ROLLNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZCS_ABAP_ELEMDESCR" FIELDNAME="DESCRIPTOR" DDLANGUAGE="E" POSITION="0002" ROLLNAME="CL_ABAP_ELEMDESCR" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="REF" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  REF RC" MASKLEN="0000" DDTEXT="Runtime Type Services" DEPTH="00" COMPTYPE="R" REFTYPE="C" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZCS_ABAP_TABLEDESCR" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Table Descriptor Structure" AUTHCLASS="00" PROZPUFF="000" EXCLASS="1">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZCS_ABAP_TABLEDESCR" FIELDNAME="NAME" DDLANGUAGE="E" POSITION="0001" ROLLNAME="TABNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" DOMNAME="AS4TAB" ROUTPUTLEN="000000" MEMORYID="DTB" HEADLEN="30" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" ENTITYTAB="DD02L" MASK="  CHARE" MASKLEN="0000" DDTEXT="Table Name" REPTEXT="Table Name" SCRTEXT_S="Table" SCRTEXT_M="Table Name" SCRTEXT_L="Table Name" DOMNAME3L="AS4TAB" DEPTH="00" COMPTYPE="E" DEFFDNAME="TABNAME" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZCS_ABAP_TABLEDESCR" FIELDNAME="DESCRIPTOR" DDLANGUAGE="E" POSITION="0002" ROLLNAME="CL_ABAP_TABLEDESCR" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="REF" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  REF RC" MASKLEN="0000" DDTEXT="Runtime Type Services" DEPTH="00" COMPTYPE="R" REFTYPE="C" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TRAN TCODE="ZSRQSE16" PGMNA="ZDYNSRQ" DYPNO="9001" CINFO="00">
  <tstct SPRSL="E" TCODE="ZSRQSE16" TTEXT="Remote Enabled SE16"/>
  <tstcc TCODE="ZSRQSE16"/>
  <tstcp/>
  <rsstcd ST_PROG="X" DEVCLASS="$TMP"/>
 </TRAN>
 <TTYP TYPENAME="ZTT_STRUKNAME" DDLANGUAGE="E" ROWTYPE="STRUKNAME" ROWKIND="E" DATATYPE="CHAR" LENG="000030" DECIMALS="000000" ACCESSMODE="T" KEYDEF="D" KEYKIND="N" KEYFDCOUNT="0000" DDTEXT="Structure List" TYPELEN="000030" CTLENG="000000" CTDECIMALS="000000" OCCURS="00000"/>
 <TTYP TYPENAME="ZTT_ROLLNAME" DDLANGUAGE="E" ROWTYPE="ROLLNAME" ROWKIND="E" DATATYPE="CHAR" LENG="000030" DECIMALS="000000" ACCESSMODE="T" KEYDEF="D" KEYKIND="N" KEYFDCOUNT="0000" DDTEXT="Data Element List" TYPELEN="000030" CTLENG="000000" CTDECIMALS="000000" OCCURS="00000"/>
 <TTYP TYPENAME="ZCT_ABAP_ELEMDESCR" DDLANGUAGE="E" ROWTYPE="ZCS_ABAP_ELEMDESCR" ROWKIND="S" DATATYPE="STRU" LENG="000000" DECIMALS="000000" ACCESSMODE="T" KEYDEF="D" KEYKIND="N" KEYFDCOUNT="0000" DDTEXT="Standard Table of Element Descriptors" TYPELEN="000068" CTLENG="000000" CTDECIMALS="000000" REFTYPE="C" OCCURS="00000"/>
 <TTYP TYPENAME="ZCT_ABAP_TABLEDESCR" DDLANGUAGE="E" ROWTYPE="ZCS_ABAP_TABLEDESCR" ROWKIND="S" DATATYPE="STRU" LENG="000000" DECIMALS="000000" ACCESSMODE="T" KEYDEF="D" KEYKIND="N" KEYFDCOUNT="0000" DDTEXT="Standard Table of Table Descriptors" TYPELEN="000068" CTLENG="000000" CTDECIMALS="000000" REFTYPE="C" OCCURS="00000"/>
 <TTYP TYPENAME="ZCT_ABAP_STRUCTDESCR" DDLANGUAGE="E" ROWTYPE="ZCS_ABAP_STRUCTDESCR" ROWKIND="S" DATATYPE="STRU" LENG="000000" DECIMALS="000000" ACCESSMODE="T" KEYDEF="D" KEYKIND="N" KEYFDCOUNT="0000" DDTEXT="Standard Table of Structure Descriptors" TYPELEN="000068" CTLENG="000000" CTDECIMALS="000000" REFTYPE="C" OCCURS="00000"/>
 <TTYP TYPENAME="ZRFC_DB_OPT_T" DDLANGUAGE="E" ROWTYPE="RFC_DB_OPT" ROWKIND="S" DATATYPE="STRU" LENG="000000" DECIMALS="000000" ACCESSMODE="T" KEYDEF="D" KEYKIND="N" KEYFDCOUNT="0000" DDTEXT="Table type for RFC_DB_OPT" TYPELEN="000144" CTLENG="000000" CTDECIMALS="000000" OCCURS="00000"/>
 <TTYP TYPENAME="ZRFC_DB_FLD_T" DDLANGUAGE="E" ROWTYPE="RFC_DB_FLD" ROWKIND="S" DATATYPE="STRU" LENG="000000" DECIMALS="000000" ACCESSMODE="T" KEYDEF="D" KEYKIND="N" KEYFDCOUNT="0000" DDTEXT="Table type for rfc_db_fld" TYPELEN="000206" CTLENG="000000" CTDECIMALS="000000" OCCURS="00000"/>
 <TTYP TYPENAME="ZTAB512_T" DDLANGUAGE="E" ROWTYPE="TAB512" ROWKIND="S" DATATYPE="STRU" LENG="000000" DECIMALS="000000" ACCESSMODE="T" KEYDEF="D" KEYKIND="N" KEYFDCOUNT="0000" DDTEXT="Table type for tab512" TYPELEN="001024" CTLENG="000000" CTDECIMALS="000000" OCCURS="00000"/>
 <FUGR SPRAS="E" AREA="ZSRQUTILS" AREAT="SRQ Utils">
  <mainprogram NAME="SAPLZSRQUTILS" VARCL="X" DBAPL="S" DBNA="D$" SUBC="F" APPL="S" RMAND="350" RLOAD="E" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
   <textPool/>
   <source>*******************************************************************
*   System-defined Include-files.                                 *
*******************************************************************
  INCLUDE LZSRQUTILSTOP.                     &quot; Global Data
  INCLUDE LZSRQUTILSUXX.                     &quot; Function Modules

*******************************************************************
*   User-defined Include-files (if necessary).                    *
*******************************************************************
* INCLUDE LZSRQUTILSF...                     &quot; Subprograms
* INCLUDE LZSRQUTILSO...                     &quot; PBO-Modules
* INCLUDE LZSRQUTILSI...                     &quot; PAI-Modules

*INCLUDE LZSRQUTILSF01.</source>
  </mainprogram>
  <includeprograms>
   <include NAME="LZSRQUTILSTOP" VARCL="X" DBAPL="S" DBNA="D$" SUBC="I" APPL="S" RMAND="350" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
    <include_source>function-pool zsrqutils.

type-pools: shlp.

##INCL_OK
include zsrq.</include_source>
   </include>
   <include NAME="ZSRQ" VARCL="X" SUBC="I" RMAND="410" RLOAD="E" UCCHECK="X">
    <include_source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZSRQ
*&amp;---------------------------------------------------------------------*

*************************************
* See ZDYNSRQDEMO report for a demo *
*************************************

* globals
##NEEDED
data: _lv_count  type i,
      _ls_comp1  type cl_abap_structdescr=&gt;component,
      _ls_comp2  type cl_abap_structdescr=&gt;component,
      _lt_query  type zrfc_db_opt_t,
      _lt_comp1  type cl_abap_structdescr=&gt;component_table,
      _lt_comp2  type cl_abap_structdescr=&gt;component_table.

##NEEDED
data: _lo_struc1 type ref to cl_abap_structdescr,
      _lo_struc2 type ref to cl_abap_structdescr.

##NEEDED
field-symbols: &lt;_fs_field1&gt; type any,
               &lt;_fs_field2&gt; type any,
               &lt;_fs_struc&gt;  type any,
               &lt;_ft_itab&gt;   type standard table.

##NEEDED
define _srq_build-structure.

* &amp;1: rfc destination
* &amp;2: structure name
* &amp;3: result (structure data)

* sy-subrc set to 8 if error occurred

  try.

*     build internal table data
      call method zcl_dyn_remote_type_builder=&gt;build_data
        exporting
          i_rfcdest   = &amp;1
          i_struct    = &amp;2
        importing
          e_strucdata = &amp;3.

      if not &amp;3 is bound.
        ##WRITE_OK
        sy-subrc = 8.
      else.
        ##WRITE_OK
        sy-subrc = 0.
      endif.

    catch zcx_dyn_remote_type_builder.

      sy-subrc = 8.

  endtry.

end-of-definition.

##NEEDED
define _srq_build-itab.

* &amp;1: rfc destination
* &amp;2: structure name
* &amp;3: result (internal table data)

* sy-subrc set to 8 if error occurred

  try.

*     build internal table data
      call method zcl_dyn_remote_type_builder=&gt;build_data
        exporting
          i_rfcdest   = &amp;1
          i_struct    = &amp;2
        importing
          e_tabledata = &amp;3.

      if not &amp;3 is bound.
        ##WRITE_OK
        sy-subrc = 8.
      else.
        ##WRITE_OK
        sy-subrc = 0.
      endif.

    catch zcx_dyn_remote_type_builder.

      sy-subrc = 8.

  endtry.

end-of-definition.

##NEEDED
define _srq_select-single.

* &amp;1: rfc destination
* &amp;2: table name
* &amp;3: query as string
* &amp;4: result (structure data)

* sy-subrc set to 4 if nothing is found
* sy-subrc set to 8 if error occured
* sy-dbcnt set to 1

* clear globals
  refresh: _lt_query.

  if &lt;_fs_struc&gt; is assigned.
    unassign &lt;_fs_struc&gt;.
  endif.

  try.

*     encode queries
      _lt_query = zcl_dyn_remote=&gt;build_query( i_query = &amp;3 ).

      assign &amp;4-&gt;* to &lt;_fs_struc&gt;.

      if not &lt;_fs_struc&gt; is assigned.
        ##WRITE_OK
        sy-subrc = 8.
      else.

*       get data
        call method zcl_dyn_remote=&gt;get_remote_struc_data
          exporting
            i_rfc_destination = &amp;1
            i_table           = &amp;2
            i_query           = _lt_query
          importing
            e_struc           = &lt;_fs_struc&gt;.

        if not &lt;_fs_struc&gt; is initial.
          ##WRITE_OK
          sy-subrc = 0.
          ##WRITE_OK
          sy-dbcnt = 1.
        else.
          ##WRITE_OK
          sy-subrc = 4.
        endif.

      endif.

    catch zcx_dyn_remote_type_builder
          zcx_dyn_remote
          cx_parameter_invalid_range
          cx_sy_assign_cast_illegal_cast
          cx_sy_assign_cast_unknown_type
          cx_sy_assign_out_of_range.

      ##WRITE_OK
      sy-subrc = 8.

  endtry.

end-of-definition.

##NEEDED
define _srq_select.

* &amp;1: rfc destination
* &amp;2: table name
* &amp;3: query as string
* &amp;4: result (internal table data)

* sy-subrc set to 4 if nothing is found
* sy-subrc set to 8 if error occured
* sy-dbcnt set to record(s) found

* clear globals
  refresh: _lt_query.

  if &lt;_ft_itab&gt; is assigned.
    unassign &lt;_ft_itab&gt;.
  endif.

  try.

*     encode queries
      _lt_query = zcl_dyn_remote=&gt;build_query( i_query = &amp;3 ).

      assign &amp;4-&gt;* to &lt;_ft_itab&gt;.

      if not &lt;_ft_itab&gt; is assigned.
        ##WRITE_OK
        sy-subrc = 8.
      else.

*       get data
        call method zcl_dyn_remote=&gt;get_remote_table_data
          exporting
            i_rfc_destination = &amp;1
            i_table           = &amp;2
            i_query           = _lt_query
          importing
            e_table           = &lt;_ft_itab&gt;.

        if not &lt;_ft_itab&gt; is initial.
          ##WRITE_OK
          sy-subrc = 0.
          ##WRITE_OK
          sy-dbcnt = lines( &lt;_ft_itab&gt; ).
        else.
          ##WRITE_OK
          sy-subrc = 4.
        endif.

      endif.

    catch zcx_dyn_remote_type_builder
          zcx_dyn_remote
          cx_parameter_invalid_range
          cx_sy_assign_cast_illegal_cast
          cx_sy_assign_cast_unknown_type
          cx_sy_assign_out_of_range.

      ##WRITE_OK
      sy-subrc = 8.

  endtry.

end-of-definition.

##NEEDED
define _srq_get-field.

* &amp;1: structure
* &amp;2: field name
* &amp;3: field value

* sy-subrc set to 8 if error occurred

  try.

*     get field
      call method zcl_dyn_remote=&gt;get_field_value
        exporting
          i_fieldname  = &amp;2
          i_structure  = &amp;1
        importing
          e_fieldvalue = &amp;3.

    catch zcx_dyn_remote.

      ##WRITE_OK
      sy-subrc = 8.

  endtry.

  sy-subrc = 0.

end-of-definition.

##NEEDED
define _srq_set-field.

* &amp;1: structure
* &amp;2: field name
* &amp;3: field value

* sy-subrc set to 8 if error occurred

  try.

*     set field
      call method zcl_dyn_remote=&gt;set_field_value
        exporting
          i_fieldname  = &amp;2
          i_fieldvalue = &amp;3
        changing
          c_structure  = &amp;1.

    catch zcx_dyn_remote.

      ##WRITE_OK
      sy-subrc = 8.

  endtry.

  sy-subrc = 0.

end-of-definition.

##NEEDED
define _srq_move-corresponding.

* &amp;1: structure from
* &amp;2: structure to

* sy-subrc set to 8 if error occurred
* sy-dbcnt set to number of corresponding fields moved

* clear globals
  refresh: _lt_comp1, _lt_comp2.
  clear: _lv_count.
  free: _lo_struc1, _lo_struc2.

* describe local structure
  _lo_struc1 ?= cl_abap_structdescr=&gt;describe_by_data( &amp;1 ).
  _lo_struc2 ?= cl_abap_structdescr=&gt;describe_by_data( &amp;2 ).

* get local structure components
  _lt_comp1 = _lo_struc1-&gt;get_components( ).
  _lt_comp2 = _lo_struc2-&gt;get_components( ).

  try.

*     map components
      loop at _lt_comp1 into _ls_comp1.

        if &lt;_fs_field1&gt; is assigned.
          unassign &lt;_fs_field1&gt;.
        endif.

        if &lt;_fs_field2&gt; is assigned.
          unassign &lt;_fs_field2&gt;.
        endif.

        read table _lt_comp2 into _ls_comp2 with key name = _ls_comp1-name.

        if sy-subrc ne 0.
          continue.
        endif.

        assign component: _ls_comp1-name of structure &amp;1 to &lt;_fs_field1&gt;,
                          _ls_comp2-name of structure &amp;2 to &lt;_fs_field2&gt;.

        if &lt;_fs_field2&gt; is assigned and &lt;_fs_field1&gt; is assigned.
          &lt;_fs_field2&gt; = &lt;_fs_field1&gt;.
          add 1 to _lv_count.
        else.
          ##WRITE_OK
          sy-subrc = 8.
          exit.
        endif.

      endloop.

      ##WRITE_OK
      sy-subrc = 0.
      ##WRITE_OK
      sy-dbcnt = _lv_count.

    catch cx_sy_assign_cast_illegal_cast
          cx_sy_assign_cast_unknown_type
          cx_sy_assign_out_of_range.

      ##WRITE_OK
      sy-subrc = 8.

  endtry.

end-of-definition.

##NEEDED
define _srq_move-mapping.

* &amp;1: structure from
* &amp;2: structure to

* sy-subrc set to 8 if error occurred

* clear globals

  try.

      if &lt;_fs_field1&gt; is assigned.
        unassign &lt;_fs_field1&gt;.
      endif.

      if &lt;_fs_field2&gt; is assigned.
        unassign &lt;_fs_field2&gt;.
      endif.

      assign component: &amp;3 of structure &amp;1 to &lt;_fs_field1&gt;,
                        &amp;4 of structure &amp;2 to &lt;_fs_field2&gt;.

      if &lt;_fs_field2&gt; is assigned and &lt;_fs_field1&gt; is assigned.
        &lt;_fs_field2&gt; = &lt;_fs_field1&gt;.
        ##WRITE_OK
        sy-subrc = 0.
      else.
        ##WRITE_OK
        sy-subrc = 8.
      endif.

    catch cx_sy_assign_cast_illegal_cast
          cx_sy_assign_cast_unknown_type
          cx_sy_assign_out_of_range.

      ##WRITE_OK
      sy-subrc = 8.

  endtry.

end-of-definition.</include_source>
   </include>
  </includeprograms>
  <functionmodules>
   <functionmodule NAME="ZSRQF4TABLES" STEXT="Get Cost Center For Help">
    <changing PARAMETER="SHLP" TYP="SHLP_DESCR"/>
    <changing PARAMETER="CALLCONTROL" DBFIELD="DDSHF4CTRL"/>
    <tables PARAMETER="SHLP_TAB" TYP="SHLP_DESCT"/>
    <tables PARAMETER="RECORD_TAB" DBSTRUCT="SEAHLPRES"/>
    <documentation PARAMETER="SHLP_TAB" KIND="P" STEXT="List of Alternative Elementary Search Helps" INDEX=" 001"/>
    <documentation PARAMETER="RECORD_TAB" KIND="P" INDEX=" 002"/>
    <documentation PARAMETER="SHLP" KIND="P" STEXT="Description of Search Help" INDEX=" 003"/>
    <documentation PARAMETER="CALLCONTROL" KIND="P" INDEX=" 004"/>
    <fm_source_new>##NEEDED
  data: lt_selopt     type standard table of ddshselopt,
        lt_fld        type standard table of dynpread,
        ls_fld        type dynpread,
        ls_selopt     type ddshselopt,
        ls_record     type seahlpres,
        lv_query      type string,
        lv_rfc        type rfcdest,
        lv_tabname    type tabname16,
        lv_ddtext     type as4text,
        lv_rfcs       type string.

  ##NEEDED
  data: lo_dd02t_itab type ref to data.

  ##NEEDED
  constants: gc_11 type i value 11.

  field-symbols: &lt;lt_dd02t&gt; type standard table,
                 &lt;ls_dd02t&gt; type any.

* on selection only
  if callcontrol-step ne &apos;DISP&apos;.
    return.
  endif.

* get dynpro fields
  ls_fld-fieldname = &apos;GV_TABLE&apos;.
  append ls_fld to lt_fld.
  ls_fld-fieldname = &apos;GV_RFC&apos;.
  append ls_fld to lt_fld.

  call function &apos;DYNP_VALUES_READ&apos;
    exporting
      dyname                   = &apos;ZDYNSRQ&apos;
      dynumb                   = &apos;9001&apos;
      translate_to_upper       = &apos;X&apos;
      perform_conversion_exits = &apos;X&apos;
    tables
      dynpfields               = lt_fld
    exceptions
      invalid_abapworkarea     = 1
      invalid_dynprofield      = 2
      invalid_dynproname       = 3
      invalid_dynpronummer     = 4
      invalid_request          = 5
      no_fielddescription      = 6
      invalid_parameter        = 7
      undefind_error           = 8
      double_conversion        = 9
      stepl_not_found          = 10
      others                   = gc_11.

  if sy-subrc ne 0.
    return.
  endif.

  read table lt_fld into ls_fld with key fieldname = &apos;GV_RFC&apos;.

  if sy-subrc eq 0.
    lv_rfc = ls_fld-fieldvalue.
  endif.

  read table lt_fld into ls_fld with key fieldname = &apos;GV_TABLE&apos;.

  if sy-subrc eq 0.
    lv_tabname = ls_fld-fieldvalue.
    replace all occurrences of &apos;*&apos; in lv_tabname with &apos;%&apos;.
  endif.

* must be unique
  if lv_rfc is initial or lv_tabname is initial.
    return.
  endif.

  lv_rfcs = lv_rfc.

  call function &apos;RFC_VERIFY_DESTINATION&apos;
    exporting
      destination                = lv_rfcs
    exceptions
      internal_failure           = 1
      timeout                    = 2
      dest_communication_failure = 3
      dest_system_failure        = 4
      update_failure             = 5
      no_update_authority        = 6
      others                     = 7.

  if sy-subrc ne 0.
    return.
  endif.

  _srq_build-itab lv_rfc &apos;DD02T&apos; lo_dd02t_itab.

  if sy-subrc ne 0.
    return.
  endif.

* condition for text and active
  concatenate `TABNAME LIKE &apos;` lv_tabname `&apos; AND AS4LOCAL EQ &apos;A&apos; AND AS4VERS EQ &apos;0000&apos; AND DDLANGUAGE EQ &apos;` sy-langu `&apos;` into lv_query.

  ##WRITE_OK
  _srq_select lv_rfc &apos;DD02T&apos; lv_query lo_dd02t_itab.

  if sy-subrc ne 0.
    return.
  endif.

  assign lo_dd02t_itab-&gt;* to &lt;lt_dd02t&gt;.

* map result
  loop at &lt;lt_dd02t&gt; assigning &lt;ls_dd02t&gt;.

    _srq_get-field &lt;ls_dd02t&gt;: &apos;TABNAME&apos; lv_tabname, &apos;DDTEXT&apos; lv_ddtext.

    if sy-subrc eq 0.

      ls_record(16)    = lv_tabname(16).
      ls_record+16(60) = lv_ddtext(60).

      append ls_record to record_tab.

    endif.

  endloop.

* close connection
  call function &apos;RFC_CONNECTION_CLOSE&apos;
    exporting
      destination          = lv_rfc
    exceptions
      destination_not_open = 0
      others               = 0.</fm_source_new>
   </functionmodule>
  </functionmodules>
 </FUGR>
</nugget>
